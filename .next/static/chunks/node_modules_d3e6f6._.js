(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_d3e6f6._.js", {

"[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
exports._ = exports._interop_require_default = _interop_require_default;
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

}.call(this) }),
"[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
exports._ = exports._interop_require_wildcard = _interop_require_wildcard;
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) return obj;
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") return {
        default: obj
    };
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) return cache.get(obj);
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) Object.defineProperty(newObj, key, desc);
            else newObj[key] = obj[key];
        }
    }
    newObj.default = obj;
    if (cache) cache.set(obj, newObj);
    return newObj;
}

}.call(this) }),
"[project]/node_modules/@swc/helpers/cjs/_tagged_template_literal_loose.cjs [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
exports._ = exports._tagged_template_literal_loose = _tagged_template_literal_loose;
function _tagged_template_literal_loose(strings, raw) {
    if (!raw) raw = strings.slice(0);
    strings.raw = raw;
    return strings;
}

}.call(this) }),
"[project]/node_modules/scheduler/cjs/scheduler.development.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
if ("TURBOPACK compile-time truthy", 1) {
    (function() {
        'use strict';
        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
        }
        function peek(heap) {
            return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
            if (heap.length === 0) {
                return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        }
        function siftUp(heap, node, i) {
            var index = i;
            while(index > 0){
                var parentIndex = index - 1 >>> 1;
                var parent = heap[parentIndex];
                if (compare(parent, node) > 0) {
                    // The parent is larger. Swap positions.
                    heap[parentIndex] = node;
                    heap[index] = parent;
                    index = parentIndex;
                } else {
                    // The parent is smaller. Exit.
                    return;
                }
            }
        }
        function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while(index < halfLength){
                var leftIndex = (index + 1) * 2 - 1;
                var left = heap[leftIndex];
                var rightIndex = leftIndex + 1;
                var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
                if (compare(left, node) < 0) {
                    if (rightIndex < length && compare(right, left) < 0) {
                        heap[index] = right;
                        heap[rightIndex] = node;
                        index = rightIndex;
                    } else {
                        heap[index] = left;
                        heap[leftIndex] = node;
                        index = leftIndex;
                    }
                } else if (rightIndex < length && compare(right, node) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    // Neither child is smaller. Exit.
                    return;
                }
            }
        }
        function compare(a, b) {
            // Compare sort index first, then task id.
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
        }
        // TODO: Use symbols?
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {}
        /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
        if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
                return localPerformance.now();
            };
        } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
                return localDate.now() - initialTime;
            };
        } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
        // Math.pow(2, 30) - 1
        // 0b111111111111111111111111111111
        var maxSigned31BitInt = 1073741823; // Times out immediately
        var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5000;
        var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
        var taskQueue = [];
        var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
        var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
        var currentTask = null;
        var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.
        var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom
        var isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
            // Check for tasks that are no longer delayed and add them to the queue.
            var timer = peek(timerQueue);
            while(timer !== null){
                if (timer.callback === null) {
                    // Timer was cancelled.
                    pop(timerQueue);
                } else if (timer.startTime <= currentTime) {
                    // Timer fired. Transfer to the task queue.
                    pop(timerQueue);
                    timer.sortIndex = timer.expirationTime;
                    push(taskQueue, timer);
                } else {
                    // Remaining timers are pending.
                    return;
                }
                timer = peek(timerQueue);
            }
        }
        function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
                if (peek(taskQueue) !== null) {
                    isHostCallbackScheduled = true;
                    requestHostCallback(flushWork);
                } else {
                    var firstTimer = peek(timerQueue);
                    if (firstTimer !== null) {
                        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                    }
                }
            }
        }
        function flushWork(hasTimeRemaining, initialTime) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
                // We scheduled a timeout but it's no longer needed. Cancel it.
                isHostTimeoutScheduled = false;
                cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
                if ("TURBOPACK compile-time falsy", 0) {
                    "TURBOPACK unreachable";
                } else {
                    // No catch in prod code path.
                    return workLoop(hasTimeRemaining, initialTime);
                }
            } finally{
                currentTask = null;
                currentPriorityLevel = previousPriorityLevel;
                isPerformingWork = false;
            }
        }
        function workLoop(hasTimeRemaining, initialTime) {
            var currentTime = initialTime;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while(currentTask !== null && !enableSchedulerDebugging){
                if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                    break;
                }
                var callback = currentTask.callback;
                if (typeof callback === 'function') {
                    currentTask.callback = null;
                    currentPriorityLevel = currentTask.priorityLevel;
                    var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                    var continuationCallback = callback(didUserCallbackTimeout);
                    currentTime = exports.unstable_now();
                    if (typeof continuationCallback === 'function') {
                        currentTask.callback = continuationCallback;
                    } else {
                        if (currentTask === peek(taskQueue)) {
                            pop(taskQueue);
                        }
                    }
                    advanceTimers(currentTime);
                } else {
                    pop(taskQueue);
                }
                currentTask = peek(taskQueue);
            } // Return whether there's additional work
            if (currentTask !== null) {
                return true;
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                    requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
                return false;
            }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch(priorityLevel){
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                case LowPriority:
                case IdlePriority:
                    break;
                default:
                    priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
                return eventHandler();
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        }
        function unstable_next(eventHandler) {
            var priorityLevel;
            switch(currentPriorityLevel){
                case ImmediatePriority:
                case UserBlockingPriority:
                case NormalPriority:
                    // Shift down to normal priority
                    priorityLevel = NormalPriority;
                    break;
                default:
                    // Anything lower than normal priority should remain at the current level.
                    priorityLevel = currentPriorityLevel;
                    break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
                return eventHandler();
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        }
        function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
                // This is a fork of runWithPriority, inlined for performance.
                var previousPriorityLevel = currentPriorityLevel;
                currentPriorityLevel = parentPriorityLevel;
                try {
                    return callback.apply(this, arguments);
                } finally{
                    currentPriorityLevel = previousPriorityLevel;
                }
            };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === 'object' && options !== null) {
                var delay = options.delay;
                if (typeof delay === 'number' && delay > 0) {
                    startTime = currentTime + delay;
                } else {
                    startTime = currentTime;
                }
            } else {
                startTime = currentTime;
            }
            var timeout;
            switch(priorityLevel){
                case ImmediatePriority:
                    timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                    break;
                case UserBlockingPriority:
                    timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                    break;
                case IdlePriority:
                    timeout = IDLE_PRIORITY_TIMEOUT;
                    break;
                case LowPriority:
                    timeout = LOW_PRIORITY_TIMEOUT;
                    break;
                case NormalPriority:
                default:
                    timeout = NORMAL_PRIORITY_TIMEOUT;
                    break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
                id: taskIdCounter++,
                callback: callback,
                priorityLevel: priorityLevel,
                startTime: startTime,
                expirationTime: expirationTime,
                sortIndex: -1
            };
            if (startTime > currentTime) {
                // This is a delayed task.
                newTask.sortIndex = startTime;
                push(timerQueue, newTask);
                if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                    // All tasks are delayed, and this is the task with the earliest delay.
                    if (isHostTimeoutScheduled) {
                        // Cancel an existing timeout.
                        cancelHostTimeout();
                    } else {
                        isHostTimeoutScheduled = true;
                    } // Schedule a timeout.
                    requestHostTimeout(handleTimeout, startTime - currentTime);
                }
            } else {
                newTask.sortIndex = expirationTime;
                push(taskQueue, newTask);
                // wait until the next time we yield.
                if (!isHostCallbackScheduled && !isPerformingWork) {
                    isHostCallbackScheduled = true;
                    requestHostCallback(flushWork);
                }
            }
            return newTask;
        }
        function unstable_pauseExecution() {}
        function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
            // remove from the queue because you can't remove arbitrary nodes from an
            // array based heap, only the first one.)
            task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
                // The main thread has only been blocked for a really short amount of time;
                // smaller than a single frame. Don't yield yet.
                return false;
            } // The main thread has been blocked for a non-negligible amount of time. We
            return true;
        }
        function requestPaint() {}
        function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
                return;
            }
            if (fps > 0) {
                frameInterval = Math.floor(1000 / fps);
            } else {
                // reset the framerate
                frameInterval = frameYieldMs;
            }
        }
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
                // has been blocked.
                startTime = currentTime;
                var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
                // error can be observed.
                //
                // Intentionally not using a try-catch, since that makes some debugging
                // techniques harder. Instead, if `scheduledHostCallback` errors, then
                // `hasMoreWork` will remain true, and we'll continue the work loop.
                var hasMoreWork = true;
                try {
                    hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                } finally{
                    if (hasMoreWork) {
                        // If there's more work, schedule the next message event at the end
                        // of the preceding one.
                        schedulePerformWorkUntilDeadline();
                    } else {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    }
                }
            } else {
                isMessageLoopRunning = false;
            } // Yielding to the browser will give it a chance to paint, so we can
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === 'function') {
            // Node.js and old IE.
            // There's a few reasons for why we prefer setImmediate.
            //
            // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
            // (Even though this is a DOM fork of the Scheduler, you could get here
            // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
            // https://github.com/facebook/react/issues/20756
            //
            // But also, it runs earlier which is the semantic we want.
            // If other browsers ever implement it, it's better to use it.
            // Although both of these would be inferior to native scheduling.
            schedulePerformWorkUntilDeadline = function() {
                localSetImmediate(performWorkUntilDeadline);
            };
        } else if (typeof MessageChannel !== 'undefined') {
            // DOM and Worker environments.
            // We prefer MessageChannel because of the 4ms setTimeout clamping.
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
                port.postMessage(null);
            };
        } else {
            // We should only fallback here in non-browser environments.
            schedulePerformWorkUntilDeadline = function() {
                localSetTimeout(performWorkUntilDeadline, 0);
            };
        }
        function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                schedulePerformWorkUntilDeadline();
            }
        }
        function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        }
        function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
    })();
}

}.call(this) }),
"[project]/node_modules/scheduler/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/scheduler/cjs/scheduler.development.js [client] (ecmascript)");
}

}.call(this) }),
"[project]/node_modules/react-is/cjs/react-is.development.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
if ("TURBOPACK compile-time truthy", 1) {
    (function() {
        'use strict';
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.
        var hasSymbol = typeof Symbol === 'function' && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
        // (unstable) APIs that have been removed. Can we remove the symbols?
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
        function isValidElementType(type) {
            return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
            if (typeof object === 'object' && object !== null) {
                var $$typeof = object.$$typeof;
                switch($$typeof){
                    case REACT_ELEMENT_TYPE:
                        var type = object.type;
                        switch(type){
                            case REACT_ASYNC_MODE_TYPE:
                            case REACT_CONCURRENT_MODE_TYPE:
                            case REACT_FRAGMENT_TYPE:
                            case REACT_PROFILER_TYPE:
                            case REACT_STRICT_MODE_TYPE:
                            case REACT_SUSPENSE_TYPE:
                                return type;
                            default:
                                var $$typeofType = type && type.$$typeof;
                                switch($$typeofType){
                                    case REACT_CONTEXT_TYPE:
                                    case REACT_FORWARD_REF_TYPE:
                                    case REACT_LAZY_TYPE:
                                    case REACT_MEMO_TYPE:
                                    case REACT_PROVIDER_TYPE:
                                        return $$typeofType;
                                    default:
                                        return $$typeof;
                                }
                        }
                    case REACT_PORTAL_TYPE:
                        return $$typeof;
                }
            }
            return undefined;
        } // AsyncMode is deprecated along with isAsyncMode
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated
        function isAsyncMode(object) {
            {
                if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                    hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint
                    console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
                }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
            return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
    })();
}

}.call(this) }),
"[project]/node_modules/react-is/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/react-is/cjs/react-is.development.js [client] (ecmascript)");
}

}.call(this) }),
"[project]/node_modules/prop-types/lib/ReactPropTypesSecret.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

}.call(this) }),
"[project]/node_modules/prop-types/lib/has.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

module.exports = Function.call.bind(Object.prototype.hasOwnProperty);

}.call(this) }),
"[project]/node_modules/prop-types/checkPropTypes.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
var printWarning = function() {};
if ("TURBOPACK compile-time truthy", 1) {
    var ReactPropTypesSecret = __turbopack_require__("[project]/node_modules/prop-types/lib/ReactPropTypesSecret.js [client] (ecmascript)");
    var loggedTypeFailures = {};
    var has = __turbopack_require__("[project]/node_modules/prop-types/lib/has.js [client] (ecmascript)");
    printWarning = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
            console.error(message);
        }
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        } catch (x) {}
    };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */ function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if ("TURBOPACK compile-time truthy", 1) {
        for(var typeSpecName in typeSpecs){
            if (has(typeSpecs, typeSpecName)) {
                var error;
                // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.
                try {
                    // This is intentionally an invariant that gets caught. It's the same
                    // behavior as without this statement except with a better message.
                    if (typeof typeSpecs[typeSpecName] !== 'function') {
                        var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                        err.name = 'Invariant Violation';
                        throw err;
                    }
                    error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                } catch (ex) {
                    error = ex;
                }
                if (error && !(error instanceof Error)) {
                    printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
                }
                if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                    // Only monitor this failure once because there tends to be a lot of the
                    // same error.
                    loggedTypeFailures[error.message] = true;
                    var stack = getStack ? getStack() : '';
                    printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
                }
            }
        }
    }
}
/**
 * Resets warning cache when testing.
 *
 * @private
 */ checkPropTypes.resetWarningCache = function() {
    if (("TURBOPACK compile-time value", "development") !== 'production') {
        loggedTypeFailures = {};
    }
};
module.exports = checkPropTypes;

}.call(this) }),
"[project]/node_modules/prop-types/factoryWithTypeCheckers.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
'use strict';
var ReactIs = __turbopack_require__("[project]/node_modules/react-is/index.js [client] (ecmascript)");
var assign = __turbopack_require__("[project]/node_modules/next/dist/build/polyfills/object-assign.js [client] (ecmascript)");
var ReactPropTypesSecret = __turbopack_require__("[project]/node_modules/prop-types/lib/ReactPropTypesSecret.js [client] (ecmascript)");
var has = __turbopack_require__("[project]/node_modules/prop-types/lib/has.js [client] (ecmascript)");
var checkPropTypes = __turbopack_require__("[project]/node_modules/prop-types/checkPropTypes.js [client] (ecmascript)");
var printWarning = function() {};
if ("TURBOPACK compile-time truthy", 1) {
    printWarning = function(text) {
        var message = 'Warning: ' + text;
        if (typeof console !== 'undefined') {
            console.error(message);
        }
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        } catch (x) {}
    };
}
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    /* global Symbol */ var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
    /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */ function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') {
            return iteratorFn;
        }
    }
    /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */ var ANONYMOUS = '<<anonymous>>';
    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bigint: createPrimitiveTypeChecker('bigint'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */ /*eslint-disable no-self-compare*/ function is(x, y) {
        // SameValue algorithm
        if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
        } else {
            // Step 6.a: NaN == NaN
            return x !== x && y !== y;
        }
    }
    /*eslint-enable no-self-compare*/ /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */ function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === 'object' ? data : {};
        this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        if (("TURBOPACK compile-time value", "development") !== 'production') {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    // New behavior only for users of `prop-types` package
                    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (("TURBOPACK compile-time value", "development") !== 'production' && typeof console !== 'undefined') {
                    // Old behavior for people using React.PropTypes
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                    manualPropTypeWarningCount < 3) {
                        printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) {
                        return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    }
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else {
                return validate(props, propName, componentName, location, propFullName);
            }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                // `propValue` being instance of, say, date/regexp, pass the 'object'
                // check, but we can offer a more precise error message here rather than
                // 'of type `object`'.
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
                    expectedType: expectedType
                });
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') {
                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            if ("TURBOPACK compile-time truthy", 1) {
                if (arguments.length > 1) {
                    printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                } else {
                    printWarning('Invalid argument supplied to oneOf, expected an array.');
                }
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) {
                    return null;
                }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') {
                    return String(value);
                }
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') {
                return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            }
            for(var key in propValue){
                if (has(propValue, key)) {
                    var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                    if (error instanceof Error) {
                        return error;
                    }
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            ("TURBOPACK compile-time truthy", 1) ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : ("TURBOPACK unreachable", undefined);
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for(var i = 0; i < arrayOfTypeCheckers.length; i++){
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                if (checkerResult == null) {
                    return null;
                }
                if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
                    expectedTypes.push(checkerResult.data.expectedType);
                }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            }
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (typeof checker !== 'function') {
                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                }
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') {
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            }
            // We need to check all keys in case some are required but missing from props.
            var allKeys = assign({}, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (has(shapeTypes, key) && typeof checker !== 'function') {
                    return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                }
                if (!checker) {
                    return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                }
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) {
                    return error;
                }
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) {
                    return propValue.every(isNode);
                }
                if (propValue === null || isValidElement(propValue)) {
                    return true;
                }
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) {
                        while(!(step = iterator.next()).done){
                            if (!isNode(step.value)) {
                                return false;
                            }
                        }
                    } else {
                        // Iterator will provide entry [k,v] tuples rather than values.
                        while(!(step = iterator.next()).done){
                            var entry = step.value;
                            if (entry) {
                                if (!isNode(entry[1])) {
                                    return false;
                                }
                            }
                        }
                    }
                } else {
                    return false;
                }
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        // Native Symbol.
        if (propType === 'symbol') {
            return true;
        }
        // falsy value can't be a Symbol
        if (!propValue) {
            return false;
        }
        // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
        if (propValue['@@toStringTag'] === 'Symbol') {
            return true;
        }
        // Fallback for non-spec compliant Symbols which are polyfilled.
        if (typeof Symbol === 'function' && propValue instanceof Symbol) {
            return true;
        }
        return false;
    }
    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
            return 'array';
        }
        if (propValue instanceof RegExp) {
            // Old webkits (at least until Android 4.0) return 'function' rather than
            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
            // passes PropTypes.object.
            return 'object';
        }
        if (isSymbol(propType, propValue)) {
            return 'symbol';
        }
        return propType;
    }
    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) {
            return '' + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) {
                return 'date';
            } else if (propValue instanceof RegExp) {
                return 'regexp';
            }
        }
        return propType;
    }
    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    // Returns class name of the object, if any.
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
        }
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};

}.call(this) }),
"[project]/node_modules/prop-types/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [client] (ecmascript)");
"__TURBOPACK__ecmascript__hoisting__location__";
if ("TURBOPACK compile-time truthy", 1) {
    var ReactIs = __turbopack_require__("[project]/node_modules/react-is/index.js [client] (ecmascript)");
    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    module.exports = __turbopack_require__("[project]/node_modules/prop-types/factoryWithTypeCheckers.js [client] (ecmascript)")(ReactIs.isElement, throwOnDirectAccess);
} else {
    "TURBOPACK unreachable";
}

}.call(this) }),
"[project]/node_modules/classnames/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/ /* global define */ (function() {
    'use strict';
    var hasOwn = {}.hasOwnProperty;
    function classNames() {
        var classes = '';
        for(var i = 0; i < arguments.length; i++){
            var arg = arguments[i];
            if (arg) {
                classes = appendClass(classes, parseValue(arg));
            }
        }
        return classes;
    }
    function parseValue(arg) {
        if (typeof arg === 'string' || typeof arg === 'number') {
            return arg;
        }
        if (typeof arg !== 'object') {
            return '';
        }
        if (Array.isArray(arg)) {
            return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
            return arg.toString();
        }
        var classes = '';
        for(var key in arg){
            if (hasOwn.call(arg, key) && arg[key]) {
                classes = appendClass(classes, key);
            }
        }
        return classes;
    }
    function appendClass(value, newClass) {
        if (!newClass) {
            return value;
        }
        if (value) {
            return value + ' ' + newClass;
        }
        return value + newClass;
    }
    if (typeof module !== 'undefined' && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
    } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
        // register as 'classnames', consistent with npm package name
        ((r)=>r !== undefined && __turbopack_export_value__(r))(function() {
            return classNames;
        }());
    } else {
        window.classNames = classNames;
    }
})();

}.call(this) }),
"[project]/node_modules/react-date-range/dist/components/DayCell/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rangeShape = exports.default = void 0;
var _react = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
var _classnames = _interopRequireDefault(__turbopack_require__("[project]/node_modules/classnames/index.js [client] (ecmascript)"));
var _dateFns = __turbopack_require__("[project]/node_modules/date-fns/index.cjs [client] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
}
function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
} /* eslint-disable no-fallthrough */ 
class DayCell extends _react.Component {
    constructor(props, context){
        super(props, context);
        _defineProperty(this, "handleKeyEvent", (event)=>{
            const { day, onMouseDown, onMouseUp } = this.props;
            if ([
                13 /* space */ ,
                32 /* enter */ 
            ].includes(event.keyCode)) {
                if (event.type === 'keydown') onMouseDown(day);
                else onMouseUp(day);
            }
        });
        _defineProperty(this, "handleMouseEvent", (event)=>{
            const { day, disabled, onPreviewChange, onMouseEnter, onMouseDown, onMouseUp } = this.props;
            const stateChanges = {};
            if (disabled) {
                onPreviewChange();
                return;
            }
            switch(event.type){
                case 'mouseenter':
                    onMouseEnter(day);
                    onPreviewChange(day);
                    stateChanges.hover = true;
                    break;
                case 'blur':
                case 'mouseleave':
                    stateChanges.hover = false;
                    break;
                case 'mousedown':
                    stateChanges.active = true;
                    onMouseDown(day);
                    break;
                case 'mouseup':
                    event.stopPropagation();
                    stateChanges.active = false;
                    onMouseUp(day);
                    break;
                case 'focus':
                    onPreviewChange(day);
                    break;
            }
            if (Object.keys(stateChanges).length) {
                this.setState(stateChanges);
            }
        });
        _defineProperty(this, "getClassNames", ()=>{
            const { isPassive, isToday, isWeekend, isStartOfWeek, isEndOfWeek, isStartOfMonth, isEndOfMonth, disabled, styles } = this.props;
            return (0, _classnames.default)(styles.day, {
                [styles.dayPassive]: isPassive,
                [styles.dayDisabled]: disabled,
                [styles.dayToday]: isToday,
                [styles.dayWeekend]: isWeekend,
                [styles.dayStartOfWeek]: isStartOfWeek,
                [styles.dayEndOfWeek]: isEndOfWeek,
                [styles.dayStartOfMonth]: isStartOfMonth,
                [styles.dayEndOfMonth]: isEndOfMonth,
                [styles.dayHovered]: this.state.hover,
                [styles.dayActive]: this.state.active
            });
        });
        _defineProperty(this, "renderPreviewPlaceholder", ()=>{
            const { preview, day, styles } = this.props;
            if (!preview) return null;
            const startDate = preview.startDate ? (0, _dateFns.endOfDay)(preview.startDate) : null;
            const endDate = preview.endDate ? (0, _dateFns.startOfDay)(preview.endDate) : null;
            const isInRange = (!startDate || (0, _dateFns.isAfter)(day, startDate)) && (!endDate || (0, _dateFns.isBefore)(day, endDate));
            const isStartEdge = !isInRange && (0, _dateFns.isSameDay)(day, startDate);
            const isEndEdge = !isInRange && (0, _dateFns.isSameDay)(day, endDate);
            return /*#__PURE__*/ _react.default.createElement("span", {
                className: (0, _classnames.default)({
                    [styles.dayStartPreview]: isStartEdge,
                    [styles.dayInPreview]: isInRange,
                    [styles.dayEndPreview]: isEndEdge
                }),
                style: {
                    color: preview.color
                }
            });
        });
        _defineProperty(this, "renderSelectionPlaceholders", ()=>{
            const { styles, ranges, day } = this.props;
            if (this.props.displayMode === 'date') {
                let isSelected = (0, _dateFns.isSameDay)(this.props.day, this.props.date);
                return isSelected ? /*#__PURE__*/ _react.default.createElement("span", {
                    className: styles.selected,
                    style: {
                        color: this.props.color
                    }
                }) : null;
            }
            const inRanges = ranges.reduce((result, range)=>{
                let startDate = range.startDate;
                let endDate = range.endDate;
                if (startDate && endDate && (0, _dateFns.isBefore)(endDate, startDate)) {
                    [startDate, endDate] = [
                        endDate,
                        startDate
                    ];
                }
                startDate = startDate ? (0, _dateFns.endOfDay)(startDate) : null;
                endDate = endDate ? (0, _dateFns.startOfDay)(endDate) : null;
                const isInRange = (!startDate || (0, _dateFns.isAfter)(day, startDate)) && (!endDate || (0, _dateFns.isBefore)(day, endDate));
                const isStartEdge = !isInRange && (0, _dateFns.isSameDay)(day, startDate);
                const isEndEdge = !isInRange && (0, _dateFns.isSameDay)(day, endDate);
                if (isInRange || isStartEdge || isEndEdge) {
                    return [
                        ...result,
                        {
                            isStartEdge,
                            isEndEdge: isEndEdge,
                            isInRange,
                            ...range
                        }
                    ];
                }
                return result;
            }, []);
            return inRanges.map((range, i)=>/*#__PURE__*/ _react.default.createElement("span", {
                    key: i,
                    className: (0, _classnames.default)({
                        [styles.startEdge]: range.isStartEdge,
                        [styles.endEdge]: range.isEndEdge,
                        [styles.inRange]: range.isInRange
                    }),
                    style: {
                        color: range.color || this.props.color
                    }
                }));
        });
        this.state = {
            hover: false,
            active: false
        };
    }
    render() {
        const { dayContentRenderer } = this.props;
        return /*#__PURE__*/ _react.default.createElement("button", _extends({
            type: "button",
            onMouseEnter: this.handleMouseEvent,
            onMouseLeave: this.handleMouseEvent,
            onFocus: this.handleMouseEvent,
            onMouseDown: this.handleMouseEvent,
            onMouseUp: this.handleMouseEvent,
            onBlur: this.handleMouseEvent,
            onPauseCapture: this.handleMouseEvent,
            onKeyDown: this.handleKeyEvent,
            onKeyUp: this.handleKeyEvent,
            className: this.getClassNames(this.props.styles)
        }, this.props.disabled || this.props.isPassive ? {
            tabIndex: -1
        } : {}, {
            style: {
                color: this.props.color
            }
        }), this.renderSelectionPlaceholders(), this.renderPreviewPlaceholder(), /*#__PURE__*/ _react.default.createElement("span", {
            className: this.props.styles.dayNumber
        }, dayContentRenderer?.(this.props.day) || /*#__PURE__*/ _react.default.createElement("span", null, (0, _dateFns.format)(this.props.day, this.props.dayDisplayFormat))));
    }
}
DayCell.defaultProps = {};
const rangeShape = exports.rangeShape = _propTypes.default.shape({
    startDate: _propTypes.default.object,
    endDate: _propTypes.default.object,
    color: _propTypes.default.string,
    key: _propTypes.default.string,
    autoFocus: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    showDateDisplay: _propTypes.default.bool
});
DayCell.propTypes = {
    day: _propTypes.default.object.isRequired,
    dayDisplayFormat: _propTypes.default.string,
    date: _propTypes.default.object,
    ranges: _propTypes.default.arrayOf(rangeShape),
    preview: _propTypes.default.shape({
        startDate: _propTypes.default.object,
        endDate: _propTypes.default.object,
        color: _propTypes.default.string
    }),
    onPreviewChange: _propTypes.default.func,
    previewColor: _propTypes.default.string,
    disabled: _propTypes.default.bool,
    isPassive: _propTypes.default.bool,
    isToday: _propTypes.default.bool,
    isWeekend: _propTypes.default.bool,
    isStartOfWeek: _propTypes.default.bool,
    isEndOfWeek: _propTypes.default.bool,
    isStartOfMonth: _propTypes.default.bool,
    isEndOfMonth: _propTypes.default.bool,
    color: _propTypes.default.string,
    displayMode: _propTypes.default.oneOf([
        'dateRange',
        'date'
    ]),
    styles: _propTypes.default.object,
    onMouseDown: _propTypes.default.func,
    onMouseUp: _propTypes.default.func,
    onMouseEnter: _propTypes.default.func,
    dayContentRenderer: _propTypes.default.func
};
var _default = exports.default = DayCell;

}.call(this) }),
"[project]/node_modules/react-date-range/dist/utils.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.calcFocusDate = calcFocusDate;
exports.findNextRangeIndex = findNextRangeIndex;
exports.generateStyles = generateStyles;
exports.getMonthDisplayRange = getMonthDisplayRange;
var _classnames = _interopRequireDefault(__turbopack_require__("[project]/node_modules/classnames/index.js [client] (ecmascript)"));
var _dateFns = __turbopack_require__("[project]/node_modules/date-fns/index.cjs [client] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function calcFocusDate(currentFocusedDate, props) {
    const { shownDate, date, months, ranges, focusedRange, displayMode } = props;
    // find primary date according the props
    let targetInterval;
    if (displayMode === 'dateRange') {
        const range = ranges[focusedRange[0]] || {};
        targetInterval = {
            start: range.startDate,
            end: range.endDate
        };
    } else {
        targetInterval = {
            start: date,
            end: date
        };
    }
    targetInterval.start = (0, _dateFns.startOfMonth)(targetInterval.start || new Date());
    targetInterval.end = (0, _dateFns.endOfMonth)(targetInterval.end || targetInterval.start);
    const targetDate = targetInterval.start || targetInterval.end || shownDate || new Date();
    // initial focus
    if (!currentFocusedDate) return shownDate || targetDate;
    // // just return targetDate for native scrolled calendars
    // if (props.scroll.enabled) return targetDate;
    if ((0, _dateFns.differenceInCalendarMonths)(targetInterval.start, targetInterval.end) > months) {
        // don't change focused if new selection in view area
        return currentFocusedDate;
    }
    return targetDate;
}
function findNextRangeIndex(ranges) {
    let currentRangeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
    const nextIndex = ranges.findIndex((range, i)=>i > currentRangeIndex && range.autoFocus !== false && !range.disabled);
    if (nextIndex !== -1) return nextIndex;
    return ranges.findIndex((range)=>range.autoFocus !== false && !range.disabled);
}
function getMonthDisplayRange(date, dateOptions, fixedHeight) {
    const startDateOfMonth = (0, _dateFns.startOfMonth)(date, dateOptions);
    const endDateOfMonth = (0, _dateFns.endOfMonth)(date, dateOptions);
    const startDateOfCalendar = (0, _dateFns.startOfWeek)(startDateOfMonth, dateOptions);
    let endDateOfCalendar = (0, _dateFns.endOfWeek)(endDateOfMonth, dateOptions);
    if (fixedHeight && (0, _dateFns.differenceInCalendarDays)(endDateOfCalendar, startDateOfCalendar) <= 34) {
        endDateOfCalendar = (0, _dateFns.addDays)(endDateOfCalendar, 7);
    }
    return {
        start: startDateOfCalendar,
        end: endDateOfCalendar,
        startDateOfMonth,
        endDateOfMonth
    };
}
function generateStyles(sources) {
    if (!sources.length) return {};
    const generatedStyles = sources.filter((source)=>Boolean(source)).reduce((styles, styleSource)=>{
        Object.keys(styleSource).forEach((key)=>{
            styles[key] = (0, _classnames.default)(styles[key], styleSource[key]);
        });
        return styles;
    }, {});
    return generatedStyles;
}

}.call(this) }),
"[project]/node_modules/react-date-range/dist/components/Month/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
var _DayCell = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/DayCell/index.js [client] (ecmascript)"));
var _dateFns = __turbopack_require__("[project]/node_modules/date-fns/index.cjs [client] (ecmascript)");
var _utils = __turbopack_require__("[project]/node_modules/react-date-range/dist/utils.js [client] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
} /* eslint-disable no-fallthrough */ 
function renderWeekdays(styles, dateOptions, weekdayDisplayFormat) {
    const now = new Date();
    return /*#__PURE__*/ _react.default.createElement("div", {
        className: styles.weekDays
    }, (0, _dateFns.eachDayOfInterval)({
        start: (0, _dateFns.startOfWeek)(now, dateOptions),
        end: (0, _dateFns.endOfWeek)(now, dateOptions)
    }).map((day, i)=>/*#__PURE__*/ _react.default.createElement("span", {
            className: styles.weekDay,
            key: i
        }, (0, _dateFns.format)(day, weekdayDisplayFormat, dateOptions))));
}
class Month extends _react.PureComponent {
    render() {
        const now = new Date();
        const { displayMode, focusedRange, drag, styles, disabledDates, disabledDay } = this.props;
        const minDate = this.props.minDate && (0, _dateFns.startOfDay)(this.props.minDate);
        const maxDate = this.props.maxDate && (0, _dateFns.endOfDay)(this.props.maxDate);
        const monthDisplay = (0, _utils.getMonthDisplayRange)(this.props.month, this.props.dateOptions, this.props.fixedHeight);
        let ranges = this.props.ranges;
        if (displayMode === 'dateRange' && drag.status) {
            let { startDate, endDate } = drag.range;
            ranges = ranges.map((range, i)=>{
                if (i !== focusedRange[0]) return range;
                return {
                    ...range,
                    startDate,
                    endDate
                };
            });
        }
        const showPreview = this.props.showPreview && !drag.disablePreview;
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: styles.month,
            style: this.props.style
        }, this.props.showMonthName ? /*#__PURE__*/ _react.default.createElement("div", {
            className: styles.monthName
        }, (0, _dateFns.format)(this.props.month, this.props.monthDisplayFormat, this.props.dateOptions)) : null, this.props.showWeekDays && renderWeekdays(styles, this.props.dateOptions, this.props.weekdayDisplayFormat), /*#__PURE__*/ _react.default.createElement("div", {
            className: styles.days,
            onMouseLeave: this.props.onMouseLeave
        }, (0, _dateFns.eachDayOfInterval)({
            start: monthDisplay.start,
            end: monthDisplay.end
        }).map((day, index)=>{
            const isStartOfMonth = (0, _dateFns.isSameDay)(day, monthDisplay.startDateOfMonth);
            const isEndOfMonth = (0, _dateFns.isSameDay)(day, monthDisplay.endDateOfMonth);
            const isOutsideMinMax = minDate && (0, _dateFns.isBefore)(day, minDate) || maxDate && (0, _dateFns.isAfter)(day, maxDate);
            const isDisabledSpecifically = disabledDates.some((disabledDate)=>(0, _dateFns.isSameDay)(disabledDate, day));
            const isDisabledDay = disabledDay(day);
            return /*#__PURE__*/ _react.default.createElement(_DayCell.default, _extends({}, this.props, {
                ranges: ranges,
                day: day,
                preview: showPreview ? this.props.preview : null,
                isWeekend: (0, _dateFns.isWeekend)(day, this.props.dateOptions),
                isToday: (0, _dateFns.isSameDay)(day, now),
                isStartOfWeek: (0, _dateFns.isSameDay)(day, (0, _dateFns.startOfWeek)(day, this.props.dateOptions)),
                isEndOfWeek: (0, _dateFns.isSameDay)(day, (0, _dateFns.endOfWeek)(day, this.props.dateOptions)),
                isStartOfMonth: isStartOfMonth,
                isEndOfMonth: isEndOfMonth,
                key: index,
                disabled: isOutsideMinMax || isDisabledSpecifically || isDisabledDay,
                isPassive: !(0, _dateFns.isWithinInterval)(day, {
                    start: monthDisplay.startDateOfMonth,
                    end: monthDisplay.endDateOfMonth
                }),
                styles: styles,
                onMouseDown: this.props.onDragSelectionStart,
                onMouseUp: this.props.onDragSelectionEnd,
                onMouseEnter: this.props.onDragSelectionMove,
                dragRange: drag.range,
                drag: drag.status
            }));
        })));
    }
}
Month.defaultProps = {};
Month.propTypes = {
    style: _propTypes.default.object,
    styles: _propTypes.default.object,
    month: _propTypes.default.object,
    drag: _propTypes.default.object,
    dateOptions: _propTypes.default.object,
    disabledDates: _propTypes.default.array,
    disabledDay: _propTypes.default.func,
    preview: _propTypes.default.shape({
        startDate: _propTypes.default.object,
        endDate: _propTypes.default.object
    }),
    showPreview: _propTypes.default.bool,
    displayMode: _propTypes.default.oneOf([
        'dateRange',
        'date'
    ]),
    minDate: _propTypes.default.object,
    maxDate: _propTypes.default.object,
    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),
    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),
    onDragSelectionStart: _propTypes.default.func,
    onDragSelectionEnd: _propTypes.default.func,
    onDragSelectionMove: _propTypes.default.func,
    onMouseLeave: _propTypes.default.func,
    monthDisplayFormat: _propTypes.default.string,
    weekdayDisplayFormat: _propTypes.default.string,
    dayDisplayFormat: _propTypes.default.string,
    showWeekDays: _propTypes.default.bool,
    showMonthName: _propTypes.default.bool,
    fixedHeight: _propTypes.default.bool
};
var _default = exports.default = Month;

}.call(this) }),
"[project]/node_modules/react-date-range/dist/components/DateInput/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
var _classnames = _interopRequireDefault(__turbopack_require__("[project]/node_modules/classnames/index.js [client] (ecmascript)"));
var _dateFns = __turbopack_require__("[project]/node_modules/date-fns/index.cjs [client] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
}
function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}
class DateInput extends _react.PureComponent {
    constructor(props, context){
        super(props, context);
        _defineProperty(this, "onKeyDown", (e)=>{
            const { value } = this.state;
            if (e.key === 'Enter') {
                this.update(value);
            }
        });
        _defineProperty(this, "onChange", (e)=>{
            this.setState({
                value: e.target.value,
                changed: true,
                invalid: false
            });
        });
        _defineProperty(this, "onBlur", ()=>{
            const { value } = this.state;
            this.update(value);
        });
        this.state = {
            invalid: false,
            changed: false,
            value: this.formatDate(props)
        };
    }
    componentDidUpdate(prevProps) {
        const { value } = prevProps;
        if (!(0, _dateFns.isEqual)(value, this.props.value)) {
            this.setState({
                value: this.formatDate(this.props)
            });
        }
    }
    formatDate(_ref) {
        let { value, dateDisplayFormat, dateOptions } = _ref;
        if (value && (0, _dateFns.isValid)(value)) {
            return (0, _dateFns.format)(value, dateDisplayFormat, dateOptions);
        }
        return '';
    }
    update(value) {
        const { invalid, changed } = this.state;
        if (invalid || !changed || !value) {
            return;
        }
        const { onChange, dateDisplayFormat, dateOptions } = this.props;
        const parsed = (0, _dateFns.parse)(value, dateDisplayFormat, new Date(), dateOptions);
        if ((0, _dateFns.isValid)(parsed)) {
            this.setState({
                changed: false
            }, ()=>onChange(parsed));
        } else {
            this.setState({
                invalid: true
            });
        }
    }
    render() {
        const { className, readOnly, placeholder, ariaLabel, disabled, onFocus } = this.props;
        const { value, invalid } = this.state;
        return /*#__PURE__*/ _react.default.createElement("span", {
            className: (0, _classnames.default)('rdrDateInput', className)
        }, /*#__PURE__*/ _react.default.createElement("input", {
            readOnly: readOnly,
            disabled: disabled,
            value: value,
            placeholder: placeholder,
            "aria-label": ariaLabel,
            onKeyDown: this.onKeyDown,
            onChange: this.onChange,
            onBlur: this.onBlur,
            onFocus: onFocus
        }), invalid && /*#__PURE__*/ _react.default.createElement("span", {
            className: "rdrWarning"
        }, "\u26A0"));
    }
}
DateInput.propTypes = {
    value: _propTypes.default.object,
    placeholder: _propTypes.default.string,
    disabled: _propTypes.default.bool,
    readOnly: _propTypes.default.bool,
    dateOptions: _propTypes.default.object,
    dateDisplayFormat: _propTypes.default.string,
    ariaLabel: _propTypes.default.string,
    className: _propTypes.default.string,
    onFocus: _propTypes.default.func.isRequired,
    onChange: _propTypes.default.func.isRequired
};
DateInput.defaultProps = {
    readOnly: true,
    disabled: false,
    dateDisplayFormat: 'MMM D, YYYY'
};
var _default = exports.default = DateInput;

}.call(this) }),
"[project]/node_modules/react-date-range/dist/styles.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _default = exports.default = {
    dateRangeWrapper: 'rdrDateRangeWrapper',
    calendarWrapper: 'rdrCalendarWrapper',
    dateDisplay: 'rdrDateDisplay',
    dateDisplayItem: 'rdrDateDisplayItem',
    dateDisplayItemActive: 'rdrDateDisplayItemActive',
    monthAndYearWrapper: 'rdrMonthAndYearWrapper',
    monthAndYearPickers: 'rdrMonthAndYearPickers',
    nextPrevButton: 'rdrNextPrevButton',
    month: 'rdrMonth',
    weekDays: 'rdrWeekDays',
    weekDay: 'rdrWeekDay',
    days: 'rdrDays',
    day: 'rdrDay',
    dayNumber: 'rdrDayNumber',
    dayPassive: 'rdrDayPassive',
    dayToday: 'rdrDayToday',
    dayStartOfWeek: 'rdrDayStartOfWeek',
    dayEndOfWeek: 'rdrDayEndOfWeek',
    daySelected: 'rdrDaySelected',
    dayDisabled: 'rdrDayDisabled',
    dayStartOfMonth: 'rdrDayStartOfMonth',
    dayEndOfMonth: 'rdrDayEndOfMonth',
    dayWeekend: 'rdrDayWeekend',
    dayStartPreview: 'rdrDayStartPreview',
    dayInPreview: 'rdrDayInPreview',
    dayEndPreview: 'rdrDayEndPreview',
    dayHovered: 'rdrDayHovered',
    dayActive: 'rdrDayActive',
    inRange: 'rdrInRange',
    endEdge: 'rdrEndEdge',
    startEdge: 'rdrStartEdge',
    prevButton: 'rdrPprevButton',
    nextButton: 'rdrNextButton',
    selected: 'rdrSelected',
    months: 'rdrMonths',
    monthPicker: 'rdrMonthPicker',
    yearPicker: 'rdrYearPicker',
    dateDisplayWrapper: 'rdrDateDisplayWrapper',
    definedRangesWrapper: 'rdrDefinedRangesWrapper',
    staticRanges: 'rdrStaticRanges',
    staticRange: 'rdrStaticRange',
    inputRanges: 'rdrInputRanges',
    inputRange: 'rdrInputRange',
    inputRangeInput: 'rdrInputRangeInput',
    dateRangePickerWrapper: 'rdrDateRangePickerWrapper',
    staticRangeLabel: 'rdrStaticRangeLabel',
    staticRangeSelected: 'rdrStaticRangeSelected',
    monthName: 'rdrMonthName',
    infiniteMonths: 'rdrInfiniteMonths',
    monthsVertical: 'rdrMonthsVertical',
    monthsHorizontal: 'rdrMonthsHorizontal'
};

}.call(this) }),
"[project]/node_modules/react-date-range/dist/accessibility/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ariaLabelsShape = void 0;
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const ariaLabelsShape = exports.ariaLabelsShape = _propTypes.default.shape({
    dateInput: _propTypes.default.objectOf(_propTypes.default.shape({
        startDate: _propTypes.default.string,
        endDate: _propTypes.default.string
    })),
    monthPicker: _propTypes.default.string,
    yearPicker: _propTypes.default.string,
    prevButton: _propTypes.default.string,
    nextButton: _propTypes.default.string
});

}.call(this) }),
"[project]/node_modules/react-date-range/dist/components/Calendar/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
var _DayCell = __turbopack_require__("[project]/node_modules/react-date-range/dist/components/DayCell/index.js [client] (ecmascript)");
var _Month = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/Month/index.js [client] (ecmascript)"));
var _DateInput = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/DateInput/index.js [client] (ecmascript)"));
var _utils = __turbopack_require__("[project]/node_modules/react-date-range/dist/utils.js [client] (ecmascript)");
var _classnames = _interopRequireDefault(__turbopack_require__("[project]/node_modules/classnames/index.js [client] (ecmascript)"));
var _reactList = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-list/react-list.js [client] (ecmascript)"));
var _shallowEqual = __turbopack_require__("[project]/node_modules/shallow-equal/dist/index.esm.js [client] (ecmascript)");
var _dateFns = __turbopack_require__("[project]/node_modules/date-fns/index.cjs [client] (ecmascript)");
var _enUS = __turbopack_require__("[project]/node_modules/date-fns/locale/en-US.cjs [client] (ecmascript)");
var _styles = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/styles.js [client] (ecmascript)"));
var _accessibility = __turbopack_require__("[project]/node_modules/react-date-range/dist/accessibility/index.js [client] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
}
function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}
class Calendar extends _react.PureComponent {
    constructor(_props, context){
        var _this;
        super(_props, context);
        _this = this;
        _defineProperty(this, "focusToDate", function(date) {
            let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props;
            let preventUnnecessary = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            if (!props.scroll.enabled) {
                if (preventUnnecessary && props.preventSnapRefocus) {
                    const focusedDateDiff = (0, _dateFns.differenceInCalendarMonths)(date, _this.state.focusedDate);
                    const isAllowedForward = props.calendarFocus === 'forwards' && focusedDateDiff >= 0;
                    const isAllowedBackward = props.calendarFocus === 'backwards' && focusedDateDiff <= 0;
                    if ((isAllowedForward || isAllowedBackward) && Math.abs(focusedDateDiff) < props.months) {
                        return;
                    }
                }
                _this.setState({
                    focusedDate: date
                });
                return;
            }
            const targetMonthIndex = (0, _dateFns.differenceInCalendarMonths)(date, props.minDate, _this.dateOptions);
            const visibleMonths = _this.list.getVisibleRange();
            if (preventUnnecessary && visibleMonths.includes(targetMonthIndex)) return;
            _this.isFirstRender = true;
            _this.list.scrollTo(targetMonthIndex);
            _this.setState({
                focusedDate: date
            });
        });
        _defineProperty(this, "updateShownDate", function() {
            let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;
            const newProps = props.scroll.enabled ? {
                ...props,
                months: _this.list.getVisibleRange().length
            } : props;
            const newFocus = (0, _utils.calcFocusDate)(_this.state.focusedDate, newProps);
            _this.focusToDate(newFocus, newProps);
        });
        _defineProperty(this, "updatePreview", (val)=>{
            if (!val) {
                this.setState({
                    preview: null
                });
                return;
            }
            const preview = {
                startDate: val,
                endDate: val,
                color: this.props.color
            };
            this.setState({
                preview
            });
        });
        _defineProperty(this, "changeShownDate", function(value) {
            let mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'set';
            const { focusedDate } = _this.state;
            const { onShownDateChange, minDate, maxDate } = _this.props;
            const modeMapper = {
                monthOffset: ()=>(0, _dateFns.addMonths)(focusedDate, value),
                setMonth: ()=>(0, _dateFns.setMonth)(focusedDate, value),
                setYear: ()=>(0, _dateFns.setYear)(focusedDate, value),
                set: ()=>value
            };
            const newDate = (0, _dateFns.min)([
                (0, _dateFns.max)([
                    modeMapper[mode](),
                    minDate
                ]),
                maxDate
            ]);
            _this.focusToDate(newDate, _this.props, false);
            onShownDateChange && onShownDateChange(newDate);
        });
        _defineProperty(this, "handleRangeFocusChange", (rangesIndex, rangeItemIndex)=>{
            this.props.onRangeFocusChange && this.props.onRangeFocusChange([
                rangesIndex,
                rangeItemIndex
            ]);
        });
        _defineProperty(this, "handleScroll", ()=>{
            const { onShownDateChange, minDate } = this.props;
            const { focusedDate } = this.state;
            const { isFirstRender } = this;
            const visibleMonths = this.list.getVisibleRange();
            // prevent scroll jump with wrong visible value
            if (visibleMonths[0] === undefined) return;
            const visibleMonth = (0, _dateFns.addMonths)(minDate, visibleMonths[0] || 0);
            const isFocusedToDifferent = !(0, _dateFns.isSameMonth)(visibleMonth, focusedDate);
            if (isFocusedToDifferent && !isFirstRender) {
                this.setState({
                    focusedDate: visibleMonth
                });
                onShownDateChange && onShownDateChange(visibleMonth);
            }
            this.isFirstRender = false;
        });
        _defineProperty(this, "renderMonthAndYear", (focusedDate, changeShownDate, props)=>{
            const { showMonthArrow, minDate, maxDate, showMonthAndYearPickers, ariaLabels } = props;
            const upperYearLimit = (maxDate || Calendar.defaultProps.maxDate).getFullYear();
            const lowerYearLimit = (minDate || Calendar.defaultProps.minDate).getFullYear();
            const styles = this.styles;
            return /*#__PURE__*/ _react.default.createElement("div", {
                onMouseUp: (e)=>e.stopPropagation(),
                className: styles.monthAndYearWrapper
            }, showMonthArrow ? /*#__PURE__*/ _react.default.createElement("button", {
                type: "button",
                className: (0, _classnames.default)(styles.nextPrevButton, styles.prevButton),
                onClick: ()=>changeShownDate(-1, 'monthOffset'),
                "aria-label": ariaLabels.prevButton
            }, /*#__PURE__*/ _react.default.createElement("i", null)) : null, showMonthAndYearPickers ? /*#__PURE__*/ _react.default.createElement("span", {
                className: styles.monthAndYearPickers
            }, /*#__PURE__*/ _react.default.createElement("span", {
                className: styles.monthPicker
            }, /*#__PURE__*/ _react.default.createElement("select", {
                value: focusedDate.getMonth(),
                onChange: (e)=>changeShownDate(e.target.value, 'setMonth'),
                "aria-label": ariaLabels.monthPicker
            }, this.state.monthNames.map((monthName, i)=>/*#__PURE__*/ _react.default.createElement("option", {
                    key: i,
                    value: i
                }, monthName)))), /*#__PURE__*/ _react.default.createElement("span", {
                className: styles.monthAndYearDivider
            }), /*#__PURE__*/ _react.default.createElement("span", {
                className: styles.yearPicker
            }, /*#__PURE__*/ _react.default.createElement("select", {
                value: focusedDate.getFullYear(),
                onChange: (e)=>changeShownDate(e.target.value, 'setYear'),
                "aria-label": ariaLabels.yearPicker
            }, new Array(upperYearLimit - lowerYearLimit + 1).fill(upperYearLimit).map((val, i)=>{
                const year = val - i;
                return /*#__PURE__*/ _react.default.createElement("option", {
                    key: year,
                    value: year
                }, year);
            })))) : /*#__PURE__*/ _react.default.createElement("span", {
                className: styles.monthAndYearPickers
            }, this.state.monthNames[focusedDate.getMonth()], " ", focusedDate.getFullYear()), showMonthArrow ? /*#__PURE__*/ _react.default.createElement("button", {
                type: "button",
                className: (0, _classnames.default)(styles.nextPrevButton, styles.nextButton),
                onClick: ()=>changeShownDate(+1, 'monthOffset'),
                "aria-label": ariaLabels.nextButton
            }, /*#__PURE__*/ _react.default.createElement("i", null)) : null);
        });
        _defineProperty(this, "renderDateDisplay", ()=>{
            const { focusedRange, color, ranges, rangeColors, dateDisplayFormat, editableDateInputs, startDatePlaceholder, endDatePlaceholder, ariaLabels } = this.props;
            const defaultColor = rangeColors[focusedRange[0]] || color;
            const styles = this.styles;
            return /*#__PURE__*/ _react.default.createElement("div", {
                className: styles.dateDisplayWrapper
            }, ranges.map((range, i)=>{
                if (range.showDateDisplay === false || range.disabled && !range.showDateDisplay) return null;
                return /*#__PURE__*/ _react.default.createElement("div", {
                    className: styles.dateDisplay,
                    key: i,
                    style: {
                        color: range.color || defaultColor
                    }
                }, /*#__PURE__*/ _react.default.createElement(_DateInput.default, {
                    className: (0, _classnames.default)(styles.dateDisplayItem, {
                        [styles.dateDisplayItemActive]: focusedRange[0] === i && focusedRange[1] === 0
                    }),
                    readOnly: !editableDateInputs,
                    disabled: range.disabled,
                    value: range.startDate,
                    placeholder: startDatePlaceholder,
                    dateOptions: this.dateOptions,
                    dateDisplayFormat: dateDisplayFormat,
                    ariaLabel: ariaLabels.dateInput && ariaLabels.dateInput[range.key] && ariaLabels.dateInput[range.key].startDate,
                    onChange: this.onDragSelectionEnd,
                    onFocus: ()=>this.handleRangeFocusChange(i, 0)
                }), /*#__PURE__*/ _react.default.createElement(_DateInput.default, {
                    className: (0, _classnames.default)(styles.dateDisplayItem, {
                        [styles.dateDisplayItemActive]: focusedRange[0] === i && focusedRange[1] === 1
                    }),
                    readOnly: !editableDateInputs,
                    disabled: range.disabled,
                    value: range.endDate,
                    placeholder: endDatePlaceholder,
                    dateOptions: this.dateOptions,
                    dateDisplayFormat: dateDisplayFormat,
                    ariaLabel: ariaLabels.dateInput && ariaLabels.dateInput[range.key] && ariaLabels.dateInput[range.key].endDate,
                    onChange: this.onDragSelectionEnd,
                    onFocus: ()=>this.handleRangeFocusChange(i, 1)
                }));
            }));
        });
        _defineProperty(this, "onDragSelectionStart", (date)=>{
            const { onChange, dragSelectionEnabled } = this.props;
            if (dragSelectionEnabled) {
                this.setState({
                    drag: {
                        status: true,
                        range: {
                            startDate: date,
                            endDate: date
                        },
                        disablePreview: true
                    }
                });
            } else {
                onChange && onChange(date);
            }
        });
        _defineProperty(this, "onDragSelectionEnd", (date)=>{
            const { updateRange, displayMode, onChange, dragSelectionEnabled } = this.props;
            if (!dragSelectionEnabled) return;
            if (displayMode === 'date' || !this.state.drag.status) {
                onChange && onChange(date);
                return;
            }
            const newRange = {
                startDate: this.state.drag.range.startDate,
                endDate: date
            };
            if (displayMode !== 'dateRange' || (0, _dateFns.isSameDay)(newRange.startDate, date)) {
                this.setState({
                    drag: {
                        status: false,
                        range: {}
                    }
                }, ()=>onChange && onChange(date));
            } else {
                this.setState({
                    drag: {
                        status: false,
                        range: {}
                    }
                }, ()=>{
                    updateRange && updateRange(newRange);
                });
            }
        });
        _defineProperty(this, "onDragSelectionMove", (date)=>{
            const { drag } = this.state;
            if (!drag.status || !this.props.dragSelectionEnabled) return;
            this.setState({
                drag: {
                    status: drag.status,
                    range: {
                        startDate: drag.range.startDate,
                        endDate: date
                    },
                    disablePreview: true
                }
            });
        });
        _defineProperty(this, "estimateMonthSize", (index, cache)=>{
            const { direction, minDate } = this.props;
            const { scrollArea } = this.state;
            if (cache) {
                this.listSizeCache = cache;
                if (cache[index]) return cache[index];
            }
            if (direction === 'horizontal') return scrollArea.monthWidth;
            const monthStep = (0, _dateFns.addMonths)(minDate, index);
            const { start, end } = (0, _utils.getMonthDisplayRange)(monthStep, this.dateOptions);
            const isLongMonth = (0, _dateFns.differenceInDays)(end, start, this.dateOptions) + 1 > 7 * 5;
            return isLongMonth ? scrollArea.longMonthHeight : scrollArea.monthHeight;
        });
        this.dateOptions = {
            locale: _props.locale
        };
        if (_props.weekStartsOn !== undefined) this.dateOptions.weekStartsOn = _props.weekStartsOn;
        this.styles = (0, _utils.generateStyles)([
            _styles.default,
            _props.classNames
        ]);
        this.listSizeCache = {};
        this.isFirstRender = true;
        this.state = {
            monthNames: this.getMonthNames(),
            focusedDate: (0, _utils.calcFocusDate)(null, _props),
            drag: {
                status: false,
                range: {
                    startDate: null,
                    endDate: null
                },
                disablePreview: false
            },
            scrollArea: this.calcScrollArea(_props)
        };
    }
    getMonthNames() {
        return [
            ...Array(12).keys()
        ].map((i)=>this.props.locale.localize.month(i));
    }
    calcScrollArea(props) {
        const { direction, months, scroll } = props;
        if (!scroll.enabled) return {
            enabled: false
        };
        const longMonthHeight = scroll.longMonthHeight || scroll.monthHeight;
        if (direction === 'vertical') {
            return {
                enabled: true,
                monthHeight: scroll.monthHeight || 220,
                longMonthHeight: longMonthHeight || 260,
                calendarWidth: 'auto',
                calendarHeight: (scroll.calendarHeight || longMonthHeight || 240) * months
            };
        }
        return {
            enabled: true,
            monthWidth: scroll.monthWidth || 332,
            calendarWidth: (scroll.calendarWidth || scroll.monthWidth || 332) * months,
            monthHeight: longMonthHeight || 300,
            calendarHeight: longMonthHeight || 300
        };
    }
    componentDidMount() {
        if (this.props.scroll.enabled) {
            // prevent react-list's initial render focus problem
            setTimeout(()=>this.focusToDate(this.state.focusedDate));
        }
    }
    componentDidUpdate(prevProps) {
        const propMapper = {
            dateRange: 'ranges',
            date: 'date'
        };
        const targetProp = propMapper[this.props.displayMode];
        if (this.props[targetProp] !== prevProps[targetProp]) {
            this.updateShownDate(this.props);
        }
        if (prevProps.locale !== this.props.locale || prevProps.weekStartsOn !== this.props.weekStartsOn) {
            this.dateOptions = {
                locale: this.props.locale
            };
            if (this.props.weekStartsOn !== undefined) this.dateOptions.weekStartsOn = this.props.weekStartsOn;
            this.setState({
                monthNames: this.getMonthNames()
            });
        }
        if (!(0, _shallowEqual.shallowEqualObjects)(prevProps.scroll, this.props.scroll)) {
            this.setState({
                scrollArea: this.calcScrollArea(this.props)
            });
        }
    }
    renderWeekdays() {
        const now = new Date();
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: this.styles.weekDays
        }, (0, _dateFns.eachDayOfInterval)({
            start: (0, _dateFns.startOfWeek)(now, this.dateOptions),
            end: (0, _dateFns.endOfWeek)(now, this.dateOptions)
        }).map((day, i)=>/*#__PURE__*/ _react.default.createElement("span", {
                className: this.styles.weekDay,
                key: i
            }, (0, _dateFns.format)(day, this.props.weekdayDisplayFormat, this.dateOptions))));
    }
    render() {
        const { showDateDisplay, onPreviewChange, scroll, direction, disabledDates, disabledDay, maxDate, minDate, rangeColors, color, navigatorRenderer, className, preview } = this.props;
        const { scrollArea, focusedDate } = this.state;
        const isVertical = direction === 'vertical';
        const monthAndYearRenderer = navigatorRenderer || this.renderMonthAndYear;
        const ranges = this.props.ranges.map((range, i)=>({
                ...range,
                color: range.color || rangeColors[i] || color
            }));
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: (0, _classnames.default)(this.styles.calendarWrapper, className),
            onMouseUp: ()=>this.setState({
                    drag: {
                        status: false,
                        range: {}
                    }
                }),
            onMouseLeave: ()=>{
                this.setState({
                    drag: {
                        status: false,
                        range: {}
                    }
                });
            }
        }, showDateDisplay && this.renderDateDisplay(), monthAndYearRenderer(focusedDate, this.changeShownDate, this.props), scroll.enabled ? /*#__PURE__*/ _react.default.createElement("div", null, isVertical && this.renderWeekdays(this.dateOptions), /*#__PURE__*/ _react.default.createElement("div", {
            className: (0, _classnames.default)(this.styles.infiniteMonths, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal),
            onMouseLeave: ()=>onPreviewChange && onPreviewChange(),
            style: {
                width: scrollArea.calendarWidth + 11,
                height: scrollArea.calendarHeight + 11
            },
            onScroll: this.handleScroll
        }, /*#__PURE__*/ _react.default.createElement(_reactList.default, {
            length: (0, _dateFns.differenceInCalendarMonths)((0, _dateFns.endOfMonth)(maxDate), (0, _dateFns.addDays)((0, _dateFns.startOfMonth)(minDate), -1), this.dateOptions),
            treshold: 500,
            type: "variable",
            ref: (target)=>this.list = target,
            itemSizeEstimator: this.estimateMonthSize,
            axis: isVertical ? 'y' : 'x',
            itemRenderer: (index, key)=>{
                const monthStep = (0, _dateFns.addMonths)(minDate, index);
                return /*#__PURE__*/ _react.default.createElement(_Month.default, _extends({}, this.props, {
                    onPreviewChange: onPreviewChange || this.updatePreview,
                    preview: preview || this.state.preview,
                    ranges: ranges,
                    key: key,
                    drag: this.state.drag,
                    dateOptions: this.dateOptions,
                    disabledDates: disabledDates,
                    disabledDay: disabledDay,
                    month: monthStep,
                    onDragSelectionStart: this.onDragSelectionStart,
                    onDragSelectionEnd: this.onDragSelectionEnd,
                    onDragSelectionMove: this.onDragSelectionMove,
                    onMouseLeave: ()=>onPreviewChange && onPreviewChange(),
                    styles: this.styles,
                    style: isVertical ? {
                        height: this.estimateMonthSize(index)
                    } : {
                        height: scrollArea.monthHeight,
                        width: this.estimateMonthSize(index)
                    },
                    showMonthName: true,
                    showWeekDays: !isVertical
                }));
            }
        }))) : /*#__PURE__*/ _react.default.createElement("div", {
            className: (0, _classnames.default)(this.styles.months, isVertical ? this.styles.monthsVertical : this.styles.monthsHorizontal)
        }, new Array(this.props.months).fill(null).map((_, i)=>{
            let monthStep = (0, _dateFns.addMonths)(this.state.focusedDate, i);
            if (this.props.calendarFocus === 'backwards') {
                monthStep = (0, _dateFns.subMonths)(this.state.focusedDate, this.props.months - 1 - i);
            }
            return /*#__PURE__*/ _react.default.createElement(_Month.default, _extends({}, this.props, {
                onPreviewChange: onPreviewChange || this.updatePreview,
                preview: preview || this.state.preview,
                ranges: ranges,
                key: i,
                drag: this.state.drag,
                dateOptions: this.dateOptions,
                disabledDates: disabledDates,
                disabledDay: disabledDay,
                month: monthStep,
                onDragSelectionStart: this.onDragSelectionStart,
                onDragSelectionEnd: this.onDragSelectionEnd,
                onDragSelectionMove: this.onDragSelectionMove,
                onMouseLeave: ()=>onPreviewChange && onPreviewChange(),
                styles: this.styles,
                showWeekDays: !isVertical || i === 0,
                showMonthName: !isVertical || i > 0
            }));
        })));
    }
}
Calendar.defaultProps = {
    showMonthArrow: true,
    showMonthAndYearPickers: true,
    disabledDates: [],
    disabledDay: ()=>{},
    classNames: {},
    locale: _enUS.enUS,
    ranges: [],
    focusedRange: [
        0,
        0
    ],
    dateDisplayFormat: 'MMM d, yyyy',
    monthDisplayFormat: 'MMM yyyy',
    weekdayDisplayFormat: 'E',
    dayDisplayFormat: 'd',
    showDateDisplay: true,
    showPreview: true,
    displayMode: 'date',
    months: 1,
    color: '#3d91ff',
    scroll: {
        enabled: false
    },
    direction: 'vertical',
    maxDate: (0, _dateFns.addYears)(new Date(), 20),
    minDate: (0, _dateFns.addYears)(new Date(), -100),
    rangeColors: [
        '#3d91ff',
        '#3ecf8e',
        '#fed14c'
    ],
    startDatePlaceholder: 'Early',
    endDatePlaceholder: 'Continuous',
    editableDateInputs: false,
    dragSelectionEnabled: true,
    fixedHeight: false,
    calendarFocus: 'forwards',
    preventSnapRefocus: false,
    ariaLabels: {}
};
Calendar.propTypes = {
    showMonthArrow: _propTypes.default.bool,
    showMonthAndYearPickers: _propTypes.default.bool,
    disabledDates: _propTypes.default.array,
    disabledDay: _propTypes.default.func,
    minDate: _propTypes.default.object,
    maxDate: _propTypes.default.object,
    date: _propTypes.default.object,
    onChange: _propTypes.default.func,
    onPreviewChange: _propTypes.default.func,
    onRangeFocusChange: _propTypes.default.func,
    classNames: _propTypes.default.object,
    locale: _propTypes.default.object,
    shownDate: _propTypes.default.object,
    onShownDateChange: _propTypes.default.func,
    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),
    preview: _propTypes.default.shape({
        startDate: _propTypes.default.object,
        endDate: _propTypes.default.object,
        color: _propTypes.default.string
    }),
    dateDisplayFormat: _propTypes.default.string,
    monthDisplayFormat: _propTypes.default.string,
    weekdayDisplayFormat: _propTypes.default.string,
    weekStartsOn: _propTypes.default.number,
    dayDisplayFormat: _propTypes.default.string,
    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),
    initialFocusedRange: _propTypes.default.arrayOf(_propTypes.default.number),
    months: _propTypes.default.number,
    className: _propTypes.default.string,
    showDateDisplay: _propTypes.default.bool,
    showPreview: _propTypes.default.bool,
    displayMode: _propTypes.default.oneOf([
        'dateRange',
        'date'
    ]),
    color: _propTypes.default.string,
    updateRange: _propTypes.default.func,
    scroll: _propTypes.default.shape({
        enabled: _propTypes.default.bool,
        monthHeight: _propTypes.default.number,
        longMonthHeight: _propTypes.default.number,
        monthWidth: _propTypes.default.number,
        calendarWidth: _propTypes.default.number,
        calendarHeight: _propTypes.default.number
    }),
    direction: _propTypes.default.oneOf([
        'vertical',
        'horizontal'
    ]),
    startDatePlaceholder: _propTypes.default.string,
    endDatePlaceholder: _propTypes.default.string,
    navigatorRenderer: _propTypes.default.func,
    rangeColors: _propTypes.default.arrayOf(_propTypes.default.string),
    editableDateInputs: _propTypes.default.bool,
    dragSelectionEnabled: _propTypes.default.bool,
    fixedHeight: _propTypes.default.bool,
    calendarFocus: _propTypes.default.string,
    preventSnapRefocus: _propTypes.default.bool,
    ariaLabels: _accessibility.ariaLabelsShape
};
var _default = exports.default = Calendar;

}.call(this) }),
"[project]/node_modules/react-date-range/dist/components/DateRange/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
var _Calendar = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/Calendar/index.js [client] (ecmascript)"));
var _DayCell = __turbopack_require__("[project]/node_modules/react-date-range/dist/components/DayCell/index.js [client] (ecmascript)");
var _utils = __turbopack_require__("[project]/node_modules/react-date-range/dist/utils.js [client] (ecmascript)");
var _dateFns = __turbopack_require__("[project]/node_modules/date-fns/index.cjs [client] (ecmascript)");
var _classnames = _interopRequireDefault(__turbopack_require__("[project]/node_modules/classnames/index.js [client] (ecmascript)"));
var _styles = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/styles.js [client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
}
function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}
class DateRange extends _react.Component {
    constructor(props, context){
        var _this;
        super(props, context);
        _this = this;
        _defineProperty(this, "calcNewSelection", function(value) {
            let isSingleValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            const focusedRange = _this.props.focusedRange || _this.state.focusedRange;
            const { ranges, onChange, maxDate, moveRangeOnFirstSelection, retainEndDateOnFirstSelection, disabledDates } = _this.props;
            const focusedRangeIndex = focusedRange[0];
            const selectedRange = ranges[focusedRangeIndex];
            if (!selectedRange || !onChange) return {};
            let { startDate, endDate } = selectedRange;
            const now = new Date();
            let nextFocusRange;
            if (!isSingleValue) {
                startDate = value.startDate;
                endDate = value.endDate;
            } else if (focusedRange[1] === 0) {
                // startDate selection
                const dayOffset = (0, _dateFns.differenceInCalendarDays)(endDate || now, startDate);
                const calculateEndDate = ()=>{
                    if (moveRangeOnFirstSelection) {
                        return (0, _dateFns.addDays)(value, dayOffset);
                    }
                    if (retainEndDateOnFirstSelection) {
                        if (!endDate || (0, _dateFns.isBefore)(value, endDate)) {
                            return endDate;
                        }
                        return value;
                    }
                    return value || now;
                };
                startDate = value;
                endDate = calculateEndDate();
                if (maxDate) endDate = (0, _dateFns.min)([
                    endDate,
                    maxDate
                ]);
                nextFocusRange = [
                    focusedRange[0],
                    1
                ];
            } else {
                endDate = value;
            }
            // reverse dates if startDate before endDate
            let isStartDateSelected = focusedRange[1] === 0;
            if ((0, _dateFns.isBefore)(endDate, startDate)) {
                isStartDateSelected = !isStartDateSelected;
                [startDate, endDate] = [
                    endDate,
                    startDate
                ];
            }
            const inValidDatesWithinRange = disabledDates.filter((disabledDate)=>(0, _dateFns.isWithinInterval)(disabledDate, {
                    start: startDate,
                    end: endDate
                }));
            if (inValidDatesWithinRange.length > 0) {
                if (isStartDateSelected) {
                    startDate = (0, _dateFns.addDays)((0, _dateFns.max)(inValidDatesWithinRange), 1);
                } else {
                    endDate = (0, _dateFns.addDays)((0, _dateFns.min)(inValidDatesWithinRange), -1);
                }
            }
            if (!nextFocusRange) {
                const nextFocusRangeIndex = (0, _utils.findNextRangeIndex)(_this.props.ranges, focusedRange[0]);
                nextFocusRange = [
                    nextFocusRangeIndex,
                    0
                ];
            }
            return {
                wasValid: !(inValidDatesWithinRange.length > 0),
                range: {
                    startDate,
                    endDate
                },
                nextFocusRange: nextFocusRange
            };
        });
        _defineProperty(this, "setSelection", (value, isSingleValue)=>{
            const { onChange, ranges, onRangeFocusChange } = this.props;
            const focusedRange = this.props.focusedRange || this.state.focusedRange;
            const focusedRangeIndex = focusedRange[0];
            const selectedRange = ranges[focusedRangeIndex];
            if (!selectedRange) return;
            const newSelection = this.calcNewSelection(value, isSingleValue);
            onChange({
                [selectedRange.key || `range${focusedRangeIndex + 1}`]: {
                    ...selectedRange,
                    ...newSelection.range
                }
            });
            this.setState({
                focusedRange: newSelection.nextFocusRange,
                preview: null
            });
            onRangeFocusChange && onRangeFocusChange(newSelection.nextFocusRange);
        });
        _defineProperty(this, "handleRangeFocusChange", (focusedRange)=>{
            this.setState({
                focusedRange
            });
            this.props.onRangeFocusChange && this.props.onRangeFocusChange(focusedRange);
        });
        _defineProperty(this, "updatePreview", (val)=>{
            if (!val) {
                this.setState({
                    preview: null
                });
                return;
            }
            const { rangeColors, ranges } = this.props;
            const focusedRange = this.props.focusedRange || this.state.focusedRange;
            const color = ranges[focusedRange[0]]?.color || rangeColors[focusedRange[0]] || color;
            this.setState({
                preview: {
                    ...val.range,
                    color
                }
            });
        });
        this.state = {
            focusedRange: props.initialFocusedRange || [
                (0, _utils.findNextRangeIndex)(props.ranges),
                0
            ],
            preview: null
        };
        this.styles = (0, _utils.generateStyles)([
            _styles.default,
            props.classNames
        ]);
    }
    render() {
        return /*#__PURE__*/ _react.default.createElement(_Calendar.default, _extends({
            focusedRange: this.state.focusedRange,
            onRangeFocusChange: this.handleRangeFocusChange,
            preview: this.state.preview,
            onPreviewChange: (value)=>{
                this.updatePreview(value ? this.calcNewSelection(value) : null);
            }
        }, this.props, {
            displayMode: "dateRange",
            className: (0, _classnames.default)(this.styles.dateRangeWrapper, this.props.className),
            onChange: this.setSelection,
            updateRange: (val)=>this.setSelection(val, false),
            ref: (target)=>{
                this.calendar = target;
            }
        }));
    }
}
DateRange.defaultProps = {
    classNames: {},
    ranges: [],
    moveRangeOnFirstSelection: false,
    retainEndDateOnFirstSelection: false,
    rangeColors: [
        '#3d91ff',
        '#3ecf8e',
        '#fed14c'
    ],
    disabledDates: []
};
DateRange.propTypes = {
    ..._Calendar.default.propTypes,
    onChange: _propTypes.default.func,
    onRangeFocusChange: _propTypes.default.func,
    className: _propTypes.default.string,
    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),
    moveRangeOnFirstSelection: _propTypes.default.bool,
    retainEndDateOnFirstSelection: _propTypes.default.bool
};
var _default = exports.default = DateRange;

}.call(this) }),
"[project]/node_modules/react-date-range/dist/defaultRanges.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createStaticRanges = createStaticRanges;
exports.defaultStaticRanges = exports.defaultInputRanges = void 0;
var _dateFns = __turbopack_require__("[project]/node_modules/date-fns/index.cjs [client] (ecmascript)");
const defineds = {
    startOfWeek: (0, _dateFns.startOfWeek)(new Date()),
    endOfWeek: (0, _dateFns.endOfWeek)(new Date()),
    startOfLastWeek: (0, _dateFns.startOfWeek)((0, _dateFns.addDays)(new Date(), -7)),
    endOfLastWeek: (0, _dateFns.endOfWeek)((0, _dateFns.addDays)(new Date(), -7)),
    startOfToday: (0, _dateFns.startOfDay)(new Date()),
    endOfToday: (0, _dateFns.endOfDay)(new Date()),
    startOfYesterday: (0, _dateFns.startOfDay)((0, _dateFns.addDays)(new Date(), -1)),
    endOfYesterday: (0, _dateFns.endOfDay)((0, _dateFns.addDays)(new Date(), -1)),
    startOfMonth: (0, _dateFns.startOfMonth)(new Date()),
    endOfMonth: (0, _dateFns.endOfMonth)(new Date()),
    startOfLastMonth: (0, _dateFns.startOfMonth)((0, _dateFns.addMonths)(new Date(), -1)),
    endOfLastMonth: (0, _dateFns.endOfMonth)((0, _dateFns.addMonths)(new Date(), -1))
};
const staticRangeHandler = {
    range: {},
    isSelected (range) {
        const definedRange = this.range();
        return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);
    }
};
function createStaticRanges(ranges) {
    return ranges.map((range)=>({
            ...staticRangeHandler,
            ...range
        }));
}
const defaultStaticRanges = exports.defaultStaticRanges = createStaticRanges([
    {
        label: 'Today',
        range: ()=>({
                startDate: defineds.startOfToday,
                endDate: defineds.endOfToday
            })
    },
    {
        label: 'Yesterday',
        range: ()=>({
                startDate: defineds.startOfYesterday,
                endDate: defineds.endOfYesterday
            })
    },
    {
        label: 'This Week',
        range: ()=>({
                startDate: defineds.startOfWeek,
                endDate: defineds.endOfWeek
            })
    },
    {
        label: 'Last Week',
        range: ()=>({
                startDate: defineds.startOfLastWeek,
                endDate: defineds.endOfLastWeek
            })
    },
    {
        label: 'This Month',
        range: ()=>({
                startDate: defineds.startOfMonth,
                endDate: defineds.endOfMonth
            })
    },
    {
        label: 'Last Month',
        range: ()=>({
                startDate: defineds.startOfLastMonth,
                endDate: defineds.endOfLastMonth
            })
    }
]);
const defaultInputRanges = exports.defaultInputRanges = [
    {
        label: 'days up to today',
        range (value) {
            return {
                startDate: (0, _dateFns.addDays)(defineds.startOfToday, (Math.max(Number(value), 1) - 1) * -1),
                endDate: defineds.endOfToday
            };
        },
        getCurrentValue (range) {
            if (!(0, _dateFns.isSameDay)(range.endDate, defineds.endOfToday)) return '-';
            if (!range.startDate) return '∞';
            return (0, _dateFns.differenceInCalendarDays)(defineds.endOfToday, range.startDate) + 1;
        }
    },
    {
        label: 'days starting today',
        range (value) {
            const today = new Date();
            return {
                startDate: today,
                endDate: (0, _dateFns.addDays)(today, Math.max(Number(value), 1) - 1)
            };
        },
        getCurrentValue (range) {
            if (!(0, _dateFns.isSameDay)(range.startDate, defineds.startOfToday)) return '-';
            if (!range.endDate) return '∞';
            return (0, _dateFns.differenceInCalendarDays)(range.endDate, defineds.startOfToday) + 1;
        }
    }
];

}.call(this) }),
"[project]/node_modules/react-date-range/dist/components/InputRangeField/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
}
function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}
const MIN = 0;
const MAX = 99999;
class InputRangeField extends _react.Component {
    constructor(props, context){
        super(props, context);
        _defineProperty(this, "onChange", (e)=>{
            const { onChange } = this.props;
            let value = parseInt(e.target.value, 10);
            value = isNaN(value) ? 0 : Math.max(Math.min(MAX, value), MIN);
            onChange(value);
        });
    }
    shouldComponentUpdate(nextProps) {
        const { value, label, placeholder } = this.props;
        return value !== nextProps.value || label !== nextProps.label || placeholder !== nextProps.placeholder;
    }
    render() {
        const { label, placeholder, value, styles, onBlur, onFocus } = this.props;
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: styles.inputRange
        }, /*#__PURE__*/ _react.default.createElement("input", {
            className: styles.inputRangeInput,
            placeholder: placeholder,
            value: value,
            min: MIN,
            max: MAX,
            onChange: this.onChange,
            onFocus: onFocus,
            onBlur: onBlur
        }), /*#__PURE__*/ _react.default.createElement("span", {
            className: styles.inputRangeLabel
        }, label));
    }
}
InputRangeField.propTypes = {
    value: _propTypes.default.oneOfType([
        _propTypes.default.string,
        _propTypes.default.number
    ]),
    label: _propTypes.default.oneOfType([
        _propTypes.default.element,
        _propTypes.default.node
    ]).isRequired,
    placeholder: _propTypes.default.string,
    styles: _propTypes.default.shape({
        inputRange: _propTypes.default.string,
        inputRangeInput: _propTypes.default.string,
        inputRangeLabel: _propTypes.default.string
    }).isRequired,
    onBlur: _propTypes.default.func.isRequired,
    onFocus: _propTypes.default.func.isRequired,
    onChange: _propTypes.default.func.isRequired
};
InputRangeField.defaultProps = {
    value: '',
    placeholder: '-'
};
var _default = exports.default = InputRangeField;

}.call(this) }),
"[project]/node_modules/react-date-range/dist/components/DefinedRange/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
var _styles = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/styles.js [client] (ecmascript)"));
var _defaultRanges = __turbopack_require__("[project]/node_modules/react-date-range/dist/defaultRanges.js [client] (ecmascript)");
var _DayCell = __turbopack_require__("[project]/node_modules/react-date-range/dist/components/DayCell/index.js [client] (ecmascript)");
var _InputRangeField = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/InputRangeField/index.js [client] (ecmascript)"));
var _classnames = _interopRequireDefault(__turbopack_require__("[project]/node_modules/classnames/index.js [client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : String(i);
}
function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
        var i = e.call(t, r || "default");
        if ("object" != typeof i) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
}
class DefinedRange extends _react.Component {
    constructor(props){
        super(props);
        _defineProperty(this, "handleRangeChange", (range)=>{
            const { onChange, ranges, focusedRange } = this.props;
            const selectedRange = ranges[focusedRange[0]];
            if (!onChange || !selectedRange) return;
            onChange({
                [selectedRange.key || `range${focusedRange[0] + 1}`]: {
                    ...selectedRange,
                    ...range
                }
            });
        });
        this.state = {
            rangeOffset: 0,
            focusedInput: -1
        };
    }
    getRangeOptionValue(option) {
        const { ranges = [], focusedRange = [] } = this.props;
        if (typeof option.getCurrentValue !== 'function') {
            return '';
        }
        const selectedRange = ranges[focusedRange[0]] || {};
        return option.getCurrentValue(selectedRange) || '';
    }
    getSelectedRange(ranges, staticRange) {
        const focusedRangeIndex = ranges.findIndex((range)=>{
            if (!range.startDate || !range.endDate || range.disabled) return false;
            return staticRange.isSelected(range);
        });
        const selectedRange = ranges[focusedRangeIndex];
        return {
            selectedRange,
            focusedRangeIndex
        };
    }
    render() {
        const { headerContent, footerContent, onPreviewChange, inputRanges, staticRanges, ranges, renderStaticRangeLabel, rangeColors, className } = this.props;
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: (0, _classnames.default)(_styles.default.definedRangesWrapper, className)
        }, headerContent, /*#__PURE__*/ _react.default.createElement("div", {
            className: _styles.default.staticRanges
        }, staticRanges.map((staticRange, i)=>{
            const { selectedRange, focusedRangeIndex } = this.getSelectedRange(ranges, staticRange);
            let labelContent;
            if (staticRange.hasCustomRendering) {
                labelContent = renderStaticRangeLabel(staticRange);
            } else {
                labelContent = staticRange.label;
            }
            return /*#__PURE__*/ _react.default.createElement("button", {
                type: "button",
                className: (0, _classnames.default)(_styles.default.staticRange, {
                    [_styles.default.staticRangeSelected]: Boolean(selectedRange)
                }),
                style: {
                    color: selectedRange ? selectedRange.color || rangeColors[focusedRangeIndex] : null
                },
                key: i,
                onClick: ()=>this.handleRangeChange(staticRange.range(this.props)),
                onFocus: ()=>onPreviewChange && onPreviewChange(staticRange.range(this.props)),
                onMouseOver: ()=>onPreviewChange && onPreviewChange(staticRange.range(this.props)),
                onMouseLeave: ()=>{
                    onPreviewChange && onPreviewChange();
                }
            }, /*#__PURE__*/ _react.default.createElement("span", {
                tabIndex: -1,
                className: _styles.default.staticRangeLabel
            }, labelContent));
        })), /*#__PURE__*/ _react.default.createElement("div", {
            className: _styles.default.inputRanges
        }, inputRanges.map((rangeOption, i)=>/*#__PURE__*/ _react.default.createElement(_InputRangeField.default, {
                key: i,
                styles: _styles.default,
                label: rangeOption.label,
                onFocus: ()=>this.setState({
                        focusedInput: i,
                        rangeOffset: 0
                    }),
                onBlur: ()=>this.setState({
                        rangeOffset: 0
                    }),
                onChange: (value)=>this.handleRangeChange(rangeOption.range(value, this.props)),
                value: this.getRangeOptionValue(rangeOption)
            }))), footerContent);
    }
}
DefinedRange.propTypes = {
    inputRanges: _propTypes.default.array,
    staticRanges: _propTypes.default.array,
    ranges: _propTypes.default.arrayOf(_DayCell.rangeShape),
    focusedRange: _propTypes.default.arrayOf(_propTypes.default.number),
    onPreviewChange: _propTypes.default.func,
    onChange: _propTypes.default.func,
    footerContent: _propTypes.default.any,
    headerContent: _propTypes.default.any,
    rangeColors: _propTypes.default.arrayOf(_propTypes.default.string),
    className: _propTypes.default.string,
    renderStaticRangeLabel: _propTypes.default.func
};
DefinedRange.defaultProps = {
    inputRanges: _defaultRanges.defaultInputRanges,
    staticRanges: _defaultRanges.defaultStaticRanges,
    ranges: [],
    rangeColors: [
        '#3d91ff',
        '#3ecf8e',
        '#fed14c'
    ],
    focusedRange: [
        0,
        0
    ]
};
var _default = exports.default = DefinedRange;

}.call(this) }),
"[project]/node_modules/react-date-range/dist/components/DateRangePicker/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(__turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
var _propTypes = _interopRequireDefault(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"));
var _DateRange = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/DateRange/index.js [client] (ecmascript)"));
var _DefinedRange = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/DefinedRange/index.js [client] (ecmascript)"));
var _utils = __turbopack_require__("[project]/node_modules/react-date-range/dist/utils.js [client] (ecmascript)");
var _classnames = _interopRequireDefault(__turbopack_require__("[project]/node_modules/classnames/index.js [client] (ecmascript)"));
var _styles = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/styles.js [client] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
class DateRangePicker extends _react.Component {
    constructor(props){
        super(props);
        this.state = {
            focusedRange: [
                (0, _utils.findNextRangeIndex)(props.ranges),
                0
            ]
        };
        this.styles = (0, _utils.generateStyles)([
            _styles.default,
            props.classNames
        ]);
    }
    render() {
        const { focusedRange } = this.state;
        return /*#__PURE__*/ _react.default.createElement("div", {
            className: (0, _classnames.default)(this.styles.dateRangePickerWrapper, this.props.className)
        }, /*#__PURE__*/ _react.default.createElement(_DefinedRange.default, _extends({
            focusedRange: focusedRange,
            onPreviewChange: (value)=>this.dateRange.updatePreview(value ? this.dateRange.calcNewSelection(value, typeof value === 'string') : null)
        }, this.props, {
            range: this.props.ranges[focusedRange[0]],
            className: undefined
        })), /*#__PURE__*/ _react.default.createElement(_DateRange.default, _extends({
            onRangeFocusChange: (focusedRange)=>this.setState({
                    focusedRange
                }),
            focusedRange: focusedRange
        }, this.props, {
            ref: (t)=>this.dateRange = t,
            className: undefined
        })));
    }
}
DateRangePicker.defaultProps = {};
DateRangePicker.propTypes = {
    ..._DateRange.default.propTypes,
    ..._DefinedRange.default.propTypes,
    className: _propTypes.default.string
};
var _default = exports.default = DateRangePicker;

}.call(this) }),
"[project]/node_modules/react-date-range/dist/index.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Calendar", {
    enumerable: true,
    get: function() {
        return _Calendar.default;
    }
});
Object.defineProperty(exports, "DateRange", {
    enumerable: true,
    get: function() {
        return _DateRange.default;
    }
});
Object.defineProperty(exports, "DateRangePicker", {
    enumerable: true,
    get: function() {
        return _DateRangePicker.default;
    }
});
Object.defineProperty(exports, "DefinedRange", {
    enumerable: true,
    get: function() {
        return _DefinedRange.default;
    }
});
Object.defineProperty(exports, "createStaticRanges", {
    enumerable: true,
    get: function() {
        return _defaultRanges.createStaticRanges;
    }
});
Object.defineProperty(exports, "defaultInputRanges", {
    enumerable: true,
    get: function() {
        return _defaultRanges.defaultInputRanges;
    }
});
Object.defineProperty(exports, "defaultStaticRanges", {
    enumerable: true,
    get: function() {
        return _defaultRanges.defaultStaticRanges;
    }
});
var _DateRange = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/DateRange/index.js [client] (ecmascript)"));
var _Calendar = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/Calendar/index.js [client] (ecmascript)"));
var _DateRangePicker = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/DateRangePicker/index.js [client] (ecmascript)"));
var _DefinedRange = _interopRequireDefault(__turbopack_require__("[project]/node_modules/react-date-range/dist/components/DefinedRange/index.js [client] (ecmascript)"));
var _defaultRanges = __turbopack_require__("[project]/node_modules/react-date-range/dist/defaultRanges.js [client] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}

}.call(this) }),
"[project]/node_modules/react-list/react-list.js [client] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__, m: module, e: exports, t: require }) { !function() {

(function(global, factory) {
    if (typeof define === "function" && define.amd) {
        ((r)=>r !== undefined && __turbopack_export_value__(r))(factory(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"), __turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)")));
    } else if (typeof exports !== "undefined") {
        factory(__turbopack_require__("[project]/node_modules/prop-types/index.js [client] (ecmascript)"), __turbopack_require__("[project]/node_modules/react/index.js [client] (ecmascript)"));
    } else {
        var mod = {
            exports: {}
        };
        factory(global.PropTypes, global.React);
        global.ReactList = mod.exports;
    }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function(_propTypes, _react) {
    "use strict";
    _propTypes = _interopRequireDefault(_propTypes);
    _react = _interopRequireWildcard(_react);
    var _class, _temp;
    function _getRequireWildcardCache() {
        if (typeof WeakMap !== "function") return null;
        var cache = new WeakMap();
        _getRequireWildcardCache = function _getRequireWildcardCache() {
            return cache;
        };
        return cache;
    }
    function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
            return obj;
        }
        if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
            return {
                "default": obj
            };
        }
        var cache = _getRequireWildcardCache();
        if (cache && cache.has(obj)) {
            return cache.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for(var key in obj){
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                if (desc && (desc.get || desc.set)) {
                    Object.defineProperty(newObj, key, desc);
                } else {
                    newObj[key] = obj[key];
                }
            }
        }
        newObj["default"] = obj;
        if (cache) {
            cache.set(obj, newObj);
        }
        return newObj;
    }
    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            "default": obj
        };
    }
    function _typeof(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
                return typeof obj;
            };
        } else {
            _typeof = function _typeof(obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function _defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else {
                result = Super.apply(this, arguments);
            }
            return _possibleConstructorReturn(this, result);
        };
    }
    function _possibleConstructorReturn(self1, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
            return call;
        }
        return _assertThisInitialized(self1);
    }
    function _assertThisInitialized(self1) {
        if (self1 === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return self1;
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
    }
    function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
            keys.push.apply(keys, symbols);
        }
        return keys;
    }
    function _objectSpread(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
                ownKeys(Object(source), true).forEach(function(key) {
                    _defineProperty(target, key, source[key]);
                });
            } else if (Object.getOwnPropertyDescriptors) {
                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
                ownKeys(Object(source)).forEach(function(key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                });
            }
        }
        return target;
    }
    function _defineProperty(obj, key, value) {
        if (key in obj) {
            Object.defineProperty(obj, key, {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        } else {
            obj[key] = value;
        }
        return obj;
    }
    var CLIENT_SIZE_KEYS = {
        x: 'clientWidth',
        y: 'clientHeight'
    };
    var CLIENT_START_KEYS = {
        x: 'clientTop',
        y: 'clientLeft'
    };
    var INNER_SIZE_KEYS = {
        x: 'innerWidth',
        y: 'innerHeight'
    };
    var OFFSET_SIZE_KEYS = {
        x: 'offsetWidth',
        y: 'offsetHeight'
    };
    var OFFSET_START_KEYS = {
        x: 'offsetLeft',
        y: 'offsetTop'
    };
    var OVERFLOW_KEYS = {
        x: 'overflowX',
        y: 'overflowY'
    };
    var SCROLL_SIZE_KEYS = {
        x: 'scrollWidth',
        y: 'scrollHeight'
    };
    var SCROLL_START_KEYS = {
        x: 'scrollLeft',
        y: 'scrollTop'
    };
    var SIZE_KEYS = {
        x: 'width',
        y: 'height'
    };
    var NOOP = function NOOP() {}; // If a browser doesn't support the `options` argument to
    // add/removeEventListener, we need to check, otherwise we will
    // accidentally set `capture` with a truthy value.
    var PASSIVE = function() {
        if (typeof window === 'undefined') return false;
        var hasSupport = false;
        try {
            document.createElement('div').addEventListener('test', NOOP, {
                get passive () {
                    hasSupport = true;
                    return false;
                }
            });
        } catch (e) {}
        return hasSupport;
    }() ? {
        passive: true
    } : false;
    var UNSTABLE_MESSAGE = 'ReactList failed to reach a stable state.';
    var MAX_SYNC_UPDATES = 40;
    var isEqualSubset = function isEqualSubset(a, b) {
        for(var key in b){
            if (a[key] !== b[key]) return false;
        }
        return true;
    };
    var defaultScrollParentGetter = function defaultScrollParentGetter(component) {
        var axis = component.props.axis;
        var el = component.getEl();
        var overflowKey = OVERFLOW_KEYS[axis];
        while(el = el.parentElement){
            switch(window.getComputedStyle(el)[overflowKey]){
                case 'auto':
                case 'scroll':
                case 'overlay':
                    return el;
            }
        }
        return window;
    };
    var defaultScrollParentViewportSizeGetter = function defaultScrollParentViewportSizeGetter(component) {
        var axis = component.props.axis;
        var scrollParent = component.scrollParent;
        return scrollParent === window ? window[INNER_SIZE_KEYS[axis]] : scrollParent[CLIENT_SIZE_KEYS[axis]];
    };
    var constrain = function constrain(props, state) {
        var length = props.length, minSize = props.minSize, type = props.type;
        var from = state.from, size = state.size, itemsPerRow = state.itemsPerRow;
        size = Math.max(size, minSize);
        var mod = size % itemsPerRow;
        if (mod) size += itemsPerRow - mod;
        if (size > length) size = length;
        from = type === 'simple' || !from ? 0 : Math.max(Math.min(from, length - size), 0);
        if (mod = from % itemsPerRow) {
            from -= mod;
            size += mod;
        }
        if (from === state.from && size == state.size) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
            from: from,
            size: size
        });
    };
    module.exports = (_temp = _class = /*#__PURE__*/ function(_Component) {
        _inherits(ReactList, _Component);
        var _super = _createSuper(ReactList);
        _createClass(ReactList, null, [
            {
                key: "getDerivedStateFromProps",
                value: function getDerivedStateFromProps(props, state) {
                    var newState = constrain(props, state);
                    return newState === state ? null : newState;
                }
            }
        ]);
        function ReactList(props) {
            var _this;
            _classCallCheck(this, ReactList);
            _this = _super.call(this, props);
            _this.state = constrain(props, {
                itemsPerRow: 1,
                from: props.initialIndex,
                size: 0
            });
            _this.cache = {};
            _this.cachedScrollPosition = null;
            _this.prevPrevState = {};
            _this.unstable = false;
            _this.updateCounter = 0;
            return _this;
        }
        _createClass(ReactList, [
            {
                key: "componentDidMount",
                value: function componentDidMount() {
                    this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);
                    window.addEventListener('resize', this.updateFrameAndClearCache);
                    this.updateFrame(this.scrollTo.bind(this, this.props.initialIndex));
                }
            },
            {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps) {
                    var _this2 = this;
                    // Viewport scroll is no longer useful if axis changes
                    if (this.props.axis !== prevProps.axis) this.clearSizeCache(); // If the list has reached an unstable state, prevent an infinite loop.
                    if (this.unstable) return;
                    if (++this.updateCounter > MAX_SYNC_UPDATES) {
                        this.unstable = true;
                        return console.error(UNSTABLE_MESSAGE);
                    }
                    if (!this.updateCounterTimeoutId) {
                        this.updateCounterTimeoutId = setTimeout(function() {
                            _this2.updateCounter = 0;
                            delete _this2.updateCounterTimeoutId;
                        }, 0);
                    }
                    this.updateFrame();
                }
            },
            {
                key: "maybeSetState",
                value: function maybeSetState(b, cb) {
                    if (isEqualSubset(this.state, b)) return cb();
                    this.setState(b, cb);
                }
            },
            {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                    window.removeEventListener('resize', this.updateFrameAndClearCache);
                    this.scrollParent.removeEventListener('scroll', this.updateFrameAndClearCache, PASSIVE);
                    this.scrollParent.removeEventListener('mousewheel', NOOP, PASSIVE);
                }
            },
            {
                key: "getOffset",
                value: function getOffset(el) {
                    var axis = this.props.axis;
                    var offset = el[CLIENT_START_KEYS[axis]] || 0;
                    var offsetKey = OFFSET_START_KEYS[axis];
                    do {
                        offset += el[offsetKey] || 0;
                    }while (el = el.offsetParent)
                    return offset;
                }
            },
            {
                key: "getEl",
                value: function getEl() {
                    return this.el || this.items;
                }
            },
            {
                key: "getScrollPosition",
                value: function getScrollPosition() {
                    // Cache scroll position as this causes a forced synchronous layout.
                    if (typeof this.cachedScrollPosition === 'number') {
                        return this.cachedScrollPosition;
                    }
                    var scrollParent = this.scrollParent;
                    var axis = this.props.axis;
                    var scrollKey = SCROLL_START_KEYS[axis];
                    var actual = scrollParent === window ? // always return document.documentElement[scrollKey] as 0, so take
                    // whichever has a value.
                    document.body[scrollKey] || document.documentElement[scrollKey] : scrollParent[scrollKey];
                    var max = this.getScrollSize() - this.props.scrollParentViewportSizeGetter(this);
                    var scroll = Math.max(0, Math.min(actual, max));
                    var el = this.getEl();
                    this.cachedScrollPosition = this.getOffset(scrollParent) + scroll - this.getOffset(el);
                    return this.cachedScrollPosition;
                }
            },
            {
                key: "setScroll",
                value: function setScroll(offset) {
                    var scrollParent = this.scrollParent;
                    var axis = this.props.axis;
                    offset += this.getOffset(this.getEl());
                    if (scrollParent === window) return window.scrollTo(0, offset);
                    offset -= this.getOffset(this.scrollParent);
                    scrollParent[SCROLL_START_KEYS[axis]] = offset;
                }
            },
            {
                key: "getScrollSize",
                value: function getScrollSize() {
                    var scrollParent = this.scrollParent;
                    var _document = document, body = _document.body, documentElement = _document.documentElement;
                    var key = SCROLL_SIZE_KEYS[this.props.axis];
                    return scrollParent === window ? Math.max(body[key], documentElement[key]) : scrollParent[key];
                }
            },
            {
                key: "hasDeterminateSize",
                value: function hasDeterminateSize() {
                    var _this$props = this.props, itemSizeGetter = _this$props.itemSizeGetter, type = _this$props.type;
                    return type === 'uniform' || itemSizeGetter;
                }
            },
            {
                key: "getStartAndEnd",
                value: function getStartAndEnd() {
                    var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.threshold;
                    var scroll = this.getScrollPosition();
                    var start = Math.max(0, scroll - threshold);
                    var end = scroll + this.props.scrollParentViewportSizeGetter(this) + threshold;
                    if (this.hasDeterminateSize()) {
                        end = Math.min(end, this.getSpaceBefore(this.props.length));
                    }
                    return {
                        start: start,
                        end: end
                    };
                }
            },
            {
                key: "getItemSizeAndItemsPerRow",
                value: function getItemSizeAndItemsPerRow() {
                    var _this$props2 = this.props, axis = _this$props2.axis, useStaticSize = _this$props2.useStaticSize;
                    var _this$state = this.state, itemSize = _this$state.itemSize, itemsPerRow = _this$state.itemsPerRow;
                    if (useStaticSize && itemSize && itemsPerRow) {
                        return {
                            itemSize: itemSize,
                            itemsPerRow: itemsPerRow
                        };
                    }
                    var itemEls = this.items.children;
                    if (!itemEls.length) return {};
                    var firstEl = itemEls[0]; // Firefox has a problem where it will return a *slightly* (less than
                    // thousandths of a pixel) different size for the same element between
                    // renders. This can cause an infinite render loop, so only change the
                    // itemSize when it is significantly different.
                    var firstElSize = firstEl[OFFSET_SIZE_KEYS[axis]];
                    var delta = Math.abs(firstElSize - itemSize);
                    if (isNaN(delta) || delta >= 1) itemSize = firstElSize;
                    if (!itemSize) return {};
                    var startKey = OFFSET_START_KEYS[axis];
                    var firstStart = firstEl[startKey];
                    itemsPerRow = 1;
                    for(var item = itemEls[itemsPerRow]; item && item[startKey] === firstStart; item = itemEls[itemsPerRow]){
                        ++itemsPerRow;
                    }
                    return {
                        itemSize: itemSize,
                        itemsPerRow: itemsPerRow
                    };
                }
            },
            {
                key: "clearSizeCache",
                value: function clearSizeCache() {
                    this.cachedScrollPosition = null;
                } // Called by 'scroll' and 'resize' events, clears scroll position cache.
            },
            {
                key: "updateFrameAndClearCache",
                value: function updateFrameAndClearCache(cb) {
                    this.clearSizeCache();
                    return this.updateFrame(cb);
                }
            },
            {
                key: "updateFrame",
                value: function updateFrame(cb) {
                    this.updateScrollParent();
                    if (typeof cb != 'function') cb = NOOP;
                    switch(this.props.type){
                        case 'simple':
                            return this.updateSimpleFrame(cb);
                        case 'variable':
                            return this.updateVariableFrame(cb);
                        case 'uniform':
                            return this.updateUniformFrame(cb);
                    }
                }
            },
            {
                key: "updateScrollParent",
                value: function updateScrollParent() {
                    var prev = this.scrollParent;
                    this.scrollParent = this.props.scrollParentGetter(this);
                    if (prev === this.scrollParent) return;
                    if (prev) {
                        prev.removeEventListener('scroll', this.updateFrameAndClearCache);
                        prev.removeEventListener('mousewheel', NOOP);
                    } // If we have a new parent, cached parent dimensions are no longer useful.
                    this.clearSizeCache();
                    this.scrollParent.addEventListener('scroll', this.updateFrameAndClearCache, PASSIVE); // You have to attach mousewheel listener to the scrollable element.
                    // Just an empty listener. After that onscroll events will be fired synchronously.
                    this.scrollParent.addEventListener('mousewheel', NOOP, PASSIVE);
                }
            },
            {
                key: "updateSimpleFrame",
                value: function updateSimpleFrame(cb) {
                    var _this$getStartAndEnd = this.getStartAndEnd(), end = _this$getStartAndEnd.end;
                    var itemEls = this.items.children;
                    var elEnd = 0;
                    if (itemEls.length) {
                        var axis = this.props.axis;
                        var firstItemEl = itemEls[0];
                        var lastItemEl = itemEls[itemEls.length - 1];
                        elEnd = this.getOffset(lastItemEl) + lastItemEl[OFFSET_SIZE_KEYS[axis]] - this.getOffset(firstItemEl);
                    }
                    if (elEnd > end) return cb();
                    var _this$props3 = this.props, pageSize = _this$props3.pageSize, length = _this$props3.length;
                    var size = Math.min(this.state.size + pageSize, length);
                    this.maybeSetState({
                        size: size
                    }, cb);
                }
            },
            {
                key: "updateVariableFrame",
                value: function updateVariableFrame(cb) {
                    if (!this.props.itemSizeGetter) this.cacheSizes();
                    var _this$getStartAndEnd2 = this.getStartAndEnd(), start = _this$getStartAndEnd2.start, end = _this$getStartAndEnd2.end;
                    var _this$props4 = this.props, length = _this$props4.length, pageSize = _this$props4.pageSize;
                    var space = 0;
                    var from = 0;
                    var size = 0;
                    var maxFrom = length - 1;
                    while(from < maxFrom){
                        var itemSize = this.getSizeOfItem(from);
                        if (itemSize == null || space + itemSize > start) break;
                        space += itemSize;
                        ++from;
                    }
                    var maxSize = length - from;
                    while(size < maxSize && space < end){
                        var _itemSize = this.getSizeOfItem(from + size);
                        if (_itemSize == null) {
                            size = Math.min(size + pageSize, maxSize);
                            break;
                        }
                        space += _itemSize;
                        ++size;
                    }
                    this.maybeSetState(constrain(this.props, {
                        from: from,
                        itemsPerRow: 1,
                        size: size
                    }), cb);
                }
            },
            {
                key: "updateUniformFrame",
                value: function updateUniformFrame(cb) {
                    var _this$getItemSizeAndI = this.getItemSizeAndItemsPerRow(), itemSize = _this$getItemSizeAndI.itemSize, itemsPerRow = _this$getItemSizeAndI.itemsPerRow;
                    if (!itemSize || !itemsPerRow) return cb();
                    var _this$getStartAndEnd3 = this.getStartAndEnd(), start = _this$getStartAndEnd3.start, end = _this$getStartAndEnd3.end;
                    var _constrain = constrain(this.props, {
                        from: Math.floor(start / itemSize) * itemsPerRow,
                        size: (Math.ceil((end - start) / itemSize) + 1) * itemsPerRow,
                        itemsPerRow: itemsPerRow
                    }), from = _constrain.from, size = _constrain.size;
                    return this.maybeSetState({
                        itemsPerRow: itemsPerRow,
                        from: from,
                        itemSize: itemSize,
                        size: size
                    }, cb);
                }
            },
            {
                key: "getSpaceBefore",
                value: function getSpaceBefore(index) {
                    var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                    if (cache[index] != null) return cache[index]; // Try the static itemSize.
                    var _this$state2 = this.state, itemSize = _this$state2.itemSize, itemsPerRow = _this$state2.itemsPerRow;
                    if (itemSize) {
                        return cache[index] = Math.floor(index / itemsPerRow) * itemSize;
                    } // Find the closest space to index there is a cached value for.
                    var from = index;
                    while(from > 0 && cache[--from] == null){
                        ;
                    } // Finally, accumulate sizes of items from - index.
                    var space = cache[from] || 0;
                    for(var i = from; i < index; ++i){
                        cache[i] = space;
                        var _itemSize2 = this.getSizeOfItem(i);
                        if (_itemSize2 == null) break;
                        space += _itemSize2;
                    }
                    return cache[index] = space;
                }
            },
            {
                key: "cacheSizes",
                value: function cacheSizes() {
                    var cache = this.cache;
                    var from = this.state.from;
                    var itemEls = this.items.children;
                    var sizeKey = OFFSET_SIZE_KEYS[this.props.axis];
                    for(var i = 0, l = itemEls.length; i < l; ++i){
                        cache[from + i] = itemEls[i][sizeKey];
                    }
                }
            },
            {
                key: "getSizeOfItem",
                value: function getSizeOfItem(index) {
                    var cache = this.cache, items = this.items;
                    var _this$props5 = this.props, axis = _this$props5.axis, itemSizeGetter = _this$props5.itemSizeGetter, itemSizeEstimator = _this$props5.itemSizeEstimator, type = _this$props5.type;
                    var _this$state3 = this.state, from = _this$state3.from, itemSize = _this$state3.itemSize, size = _this$state3.size; // Try the static itemSize.
                    if (itemSize) return itemSize; // Try the itemSizeGetter.
                    if (itemSizeGetter) return itemSizeGetter(index); // Try the cache.
                    if (index in cache) return cache[index]; // Try the DOM.
                    if (type === 'simple' && index >= from && index < from + size && items) {
                        var itemEl = items.children[index - from];
                        if (itemEl) return itemEl[OFFSET_SIZE_KEYS[axis]];
                    } // Try the itemSizeEstimator.
                    if (itemSizeEstimator) return itemSizeEstimator(index, cache);
                }
            },
            {
                key: "scrollTo",
                value: function scrollTo(index) {
                    if (index != null) this.setScroll(this.getSpaceBefore(index));
                }
            },
            {
                key: "scrollAround",
                value: function scrollAround(index) {
                    var current = this.getScrollPosition();
                    var bottom = this.getSpaceBefore(index);
                    var top = bottom - this.props.scrollParentViewportSizeGetter(this) + this.getSizeOfItem(index);
                    var min = Math.min(top, bottom);
                    var max = Math.max(top, bottom);
                    if (current <= min) return this.setScroll(min);
                    if (current > max) return this.setScroll(max);
                }
            },
            {
                key: "getVisibleRange",
                value: function getVisibleRange() {
                    var _this$state4 = this.state, from = _this$state4.from, size = _this$state4.size;
                    var _this$getStartAndEnd4 = this.getStartAndEnd(0), start = _this$getStartAndEnd4.start, end = _this$getStartAndEnd4.end;
                    var cache = {};
                    var first, last;
                    for(var i = from; i < from + size; ++i){
                        var itemStart = this.getSpaceBefore(i, cache);
                        var itemEnd = itemStart + this.getSizeOfItem(i);
                        if (first == null && itemEnd > start) first = i;
                        if (first != null && itemStart < end) last = i;
                    }
                    return [
                        first,
                        last
                    ];
                }
            },
            {
                key: "renderItems",
                value: function renderItems() {
                    var _this3 = this;
                    var _this$props6 = this.props, itemRenderer = _this$props6.itemRenderer, itemsRenderer = _this$props6.itemsRenderer;
                    var _this$state5 = this.state, from = _this$state5.from, size = _this$state5.size;
                    var items = [];
                    for(var i = 0; i < size; ++i){
                        items.push(itemRenderer(from + i, i));
                    }
                    return itemsRenderer(items, function(c) {
                        return _this3.items = c;
                    });
                }
            },
            {
                key: "render",
                value: function render() {
                    var _this4 = this;
                    var _this$props7 = this.props, axis = _this$props7.axis, length = _this$props7.length, type = _this$props7.type, useTranslate3d = _this$props7.useTranslate3d;
                    var _this$state6 = this.state, from = _this$state6.from, itemsPerRow = _this$state6.itemsPerRow;
                    var items = this.renderItems();
                    if (type === 'simple') return items;
                    var style = {
                        position: 'relative'
                    };
                    var cache = {};
                    var bottom = Math.ceil(length / itemsPerRow) * itemsPerRow;
                    var size = this.getSpaceBefore(bottom, cache);
                    if (size) {
                        style[SIZE_KEYS[axis]] = size;
                        if (axis === 'x') style.overflowX = 'hidden';
                    }
                    var offset = this.getSpaceBefore(from, cache);
                    var x = axis === 'x' ? offset : 0;
                    var y = axis === 'y' ? offset : 0;
                    var transform = useTranslate3d ? "translate3d(".concat(x, "px, ").concat(y, "px, 0)") : "translate(".concat(x, "px, ").concat(y, "px)");
                    var listStyle = {
                        msTransform: transform,
                        WebkitTransform: transform,
                        transform: transform
                    };
                    return /*#__PURE__*/ _react["default"].createElement("div", {
                        style: style,
                        ref: function ref(c) {
                            return _this4.el = c;
                        }
                    }, /*#__PURE__*/ _react["default"].createElement("div", {
                        style: listStyle
                    }, items));
                }
            }
        ]);
        return ReactList;
    }(_react.Component), _defineProperty(_class, "displayName", 'ReactList'), _defineProperty(_class, "propTypes", {
        axis: _propTypes["default"].oneOf([
            'x',
            'y'
        ]),
        initialIndex: _propTypes["default"].number,
        itemRenderer: _propTypes["default"].func,
        itemSizeEstimator: _propTypes["default"].func,
        itemSizeGetter: _propTypes["default"].func,
        itemsRenderer: _propTypes["default"].func,
        length: _propTypes["default"].number,
        minSize: _propTypes["default"].number,
        pageSize: _propTypes["default"].number,
        scrollParentGetter: _propTypes["default"].func,
        scrollParentViewportSizeGetter: _propTypes["default"].func,
        threshold: _propTypes["default"].number,
        type: _propTypes["default"].oneOf([
            'simple',
            'variable',
            'uniform'
        ]),
        useStaticSize: _propTypes["default"].bool,
        useTranslate3d: _propTypes["default"].bool
    }), _defineProperty(_class, "defaultProps", {
        axis: 'y',
        itemRenderer: function itemRenderer(index, key) {
            return /*#__PURE__*/ _react["default"].createElement("div", {
                key: key
            }, index);
        },
        itemsRenderer: function itemsRenderer(items, ref) {
            return /*#__PURE__*/ _react["default"].createElement("div", {
                ref: ref
            }, items);
        },
        length: 0,
        minSize: 1,
        pageSize: 10,
        scrollParentGetter: defaultScrollParentGetter,
        scrollParentViewportSizeGetter: defaultScrollParentViewportSizeGetter,
        threshold: 100,
        type: 'simple',
        useStaticSize: false,
        useTranslate3d: false
    }), _temp);
});

}.call(this) }),
"[project]/node_modules/shallow-equal/dist/index.esm.js [client] (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {
"use strict";

__turbopack_esm__({
    "shallowEqualArrays": ()=>shallowEqualArrays,
    "shallowEqualObjects": ()=>shallowEqualObjects
});
function shallowEqualObjects(objA, objB) {
    if (objA === objB) {
        return true;
    }
    if (!objA || !objB) {
        return false;
    }
    var aKeys = Object.keys(objA);
    var bKeys = Object.keys(objB);
    var len = aKeys.length;
    if (bKeys.length !== len) {
        return false;
    }
    for(var i = 0; i < len; i++){
        var key = aKeys[i];
        if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) {
            return false;
        }
    }
    return true;
}
function shallowEqualArrays(arrA, arrB) {
    if (arrA === arrB) {
        return true;
    }
    if (!arrA || !arrB) {
        return false;
    }
    var len = arrA.length;
    if (arrB.length !== len) {
        return false;
    }
    for(var i = 0; i < len; i++){
        if (arrA[i] !== arrB[i]) {
            return false;
        }
    }
    return true;
}
;

})()),
}]);

//# sourceMappingURL=node_modules_d3e6f6._.js.map